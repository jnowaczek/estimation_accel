// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accelerator_count1_Pipeline_APPEARANCES (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prev,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_empty_n,
        in_r_read,
        p_out,
        p_out_ap_vld,
        prev_02_out,
        prev_02_out_ap_vld,
        count_01_out,
        count_01_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] prev;
output  [8:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
input   in_r_empty_n;
output   in_r_read;
output  [2047:0] p_out;
output   p_out_ap_vld;
output  [7:0] prev_02_out;
output   prev_02_out_ap_vld;
output  [7:0] count_01_out;
output   count_01_out_ap_vld;

reg ap_idle;
reg in_r_ce0;
reg p_out_ap_vld;
reg prev_02_out_ap_vld;
reg count_01_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln102_fu_141_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln102_reg_326;
reg   [7:0] prev_02_load_2_reg_335;
reg   [7:0] byte_reg_340;
wire   [0:0] icmp_ln106_fu_170_p2;
reg   [0:0] icmp_ln106_reg_345;
wire   [31:0] zext_ln104_fu_157_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] count_01_fu_62;
wire   [7:0] count_fu_267_p2;
wire    ap_loop_init;
reg   [7:0] prev_02_fu_66;
reg   [8:0] i_fu_70;
wire   [8:0] add_ln102_fu_147_p2;
reg   [8:0] ap_sig_allocacmp_i_6;
reg   [2047:0] empty_fu_74;
wire   [2047:0] select_ln106_fu_253_p3;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln104_fu_153_p1;
wire   [10:0] shl_ln5_fu_187_p3;
wire   [2047:0] zext_ln109_fu_194_p1;
wire   [2047:0] zext_ln109_1_fu_204_p1;
wire   [2047:0] shl_ln109_fu_198_p2;
wire   [2047:0] xor_ln109_fu_214_p2;
wire   [2047:0] and_ln109_fu_220_p2;
wire   [2047:0] shl_ln109_1_fu_208_p2;
wire   [10:0] shl_ln6_fu_232_p3;
wire   [2047:0] or_ln109_fu_226_p2;
wire   [2047:0] zext_ln110_fu_239_p1;
wire   [2047:0] lshr_ln110_fu_243_p2;
wire   [7:0] trunc_ln110_fu_249_p1;
wire   [7:0] select_ln106_1_fu_260_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            count_01_fu_62 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            count_01_fu_62 <= count_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            empty_fu_74 <= 2048'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_fu_74 <= select_ln106_fu_253_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln102_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= add_ln102_fu_147_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            prev_02_fu_66 <= prev;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            prev_02_fu_66 <= in_r_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        byte_reg_340 <= in_r_q0;
        icmp_ln102_reg_326 <= icmp_ln102_fu_141_p2;
        icmp_ln106_reg_345 <= icmp_ln106_fu_170_p2;
        prev_02_load_2_reg_335 <= prev_02_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_6 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_6 = i_fu_70;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_326 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_01_out_ap_vld = 1'b1;
    end else begin
        count_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_326 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_326 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prev_02_out_ap_vld = 1'b1;
    end else begin
        prev_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_147_p2 = (ap_sig_allocacmp_i_6 + 9'd1);

assign and_ln109_fu_220_p2 = (xor_ln109_fu_214_p2 & empty_fu_74);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign count_01_out = count_01_fu_62;

assign count_fu_267_p2 = (select_ln106_1_fu_260_p3 + 8'd1);

assign icmp_ln102_fu_141_p2 = ((ap_sig_allocacmp_i_6 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_170_p2 = ((in_r_q0 == prev_02_fu_66) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln104_fu_157_p1;

assign in_r_read = 1'b0;

assign lshr_ln110_fu_243_p2 = or_ln109_fu_226_p2 >> zext_ln110_fu_239_p1;

assign or_ln109_fu_226_p2 = (shl_ln109_1_fu_208_p2 | and_ln109_fu_220_p2);

assign p_out = empty_fu_74;

assign prev_02_out = prev_02_fu_66;

assign select_ln106_1_fu_260_p3 = ((icmp_ln106_reg_345[0:0] == 1'b1) ? count_01_fu_62 : trunc_ln110_fu_249_p1);

assign select_ln106_fu_253_p3 = ((icmp_ln106_reg_345[0:0] == 1'b1) ? empty_fu_74 : or_ln109_fu_226_p2);

assign shl_ln109_1_fu_208_p2 = zext_ln109_1_fu_204_p1 << zext_ln109_fu_194_p1;

assign shl_ln109_fu_198_p2 = 2048'd255 << zext_ln109_fu_194_p1;

assign shl_ln5_fu_187_p3 = {{prev_02_load_2_reg_335}, {3'd0}};

assign shl_ln6_fu_232_p3 = {{byte_reg_340}, {3'd0}};

assign trunc_ln104_fu_153_p1 = ap_sig_allocacmp_i_6[7:0];

assign trunc_ln110_fu_249_p1 = lshr_ln110_fu_243_p2[7:0];

assign xor_ln109_fu_214_p2 = (shl_ln109_fu_198_p2 ^ 2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655);

assign zext_ln104_fu_157_p1 = trunc_ln104_fu_153_p1;

assign zext_ln109_1_fu_204_p1 = count_01_fu_62;

assign zext_ln109_fu_194_p1 = shl_ln5_fu_187_p3;

assign zext_ln110_fu_239_p1 = shl_ln6_fu_232_p3;

endmodule //accelerator_count1_Pipeline_APPEARANCES
