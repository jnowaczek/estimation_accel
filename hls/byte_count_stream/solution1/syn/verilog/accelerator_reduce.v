// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accelerator_reduce (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in0,
        in1,
        in2,
        in3,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_full_n,
        out_r_write,
        in0_empty_n,
        in1_empty_n,
        in2_empty_n,
        in3_empty_n,
        in0_read,
        in1_read,
        in2_read,
        in3_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [2047:0] in0;
input  [2047:0] in1;
input  [2047:0] in2;
input  [2047:0] in3;
output  [7:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
input   out_r_full_n;
output   out_r_write;
input   in0_empty_n;
input   in1_empty_n;
input   in2_empty_n;
input   in3_empty_n;
output   in0_read;
output   in1_read;
output   in2_read;
output   in3_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg out_r_ce0;
reg out_r_we0;
reg out_r_write;
reg in0_read;
reg in1_read;
reg in2_read;
reg in3_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [2047:0] in0_read_read_fu_102_p2;
reg   [2047:0] in0_read_reg_283;
wire   [2047:0] in1_read_read_fu_108_p2;
reg   [2047:0] in1_read_reg_288;
wire   [2047:0] in2_read_read_fu_114_p2;
reg   [2047:0] in2_read_reg_293;
wire   [2047:0] in3_read_read_fu_120_p2;
reg   [2047:0] in3_read_reg_298;
wire   [7:0] trunc_ln202_fu_199_p1;
reg   [7:0] trunc_ln202_reg_306;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln201_fu_187_p2;
wire   [7:0] trunc_ln202_1_fu_220_p1;
reg   [7:0] trunc_ln202_1_reg_311;
wire   [7:0] trunc_ln202_2_fu_229_p1;
reg   [7:0] trunc_ln202_2_reg_316;
wire   [7:0] add_ln202_1_fu_251_p2;
reg   [7:0] add_ln202_1_reg_321;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] zext_ln203_fu_272_p1;
wire    ap_block_pp0_stage0;
reg   [8:0] i_fu_58;
wire   [8:0] add_ln201_fu_193_p2;
wire    ap_CS_fsm_state4;
wire   [10:0] shl_ln_fu_203_p3;
wire   [2047:0] zext_ln202_fu_211_p1;
wire   [2047:0] lshr_ln202_fu_215_p2;
wire   [2047:0] lshr_ln202_1_fu_224_p2;
wire   [2047:0] lshr_ln202_2_fu_233_p2;
wire   [2047:0] lshr_ln202_3_fu_242_p2;
wire   [7:0] trunc_ln202_4_fu_247_p1;
wire   [7:0] trunc_ln202_3_fu_238_p1;
wire   [7:0] add_ln202_fu_262_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_58 <= 9'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln201_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_58 <= add_ln201_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln201_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln202_1_reg_321 <= add_ln202_1_fu_251_p2;
        trunc_ln202_1_reg_311 <= trunc_ln202_1_fu_220_p1;
        trunc_ln202_2_reg_316 <= trunc_ln202_2_fu_229_p1;
        trunc_ln202_reg_306 <= trunc_ln202_fu_199_p1;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_r_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln201_fu_187_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in0_read = 1'b1;
    end else begin
        in0_read = 1'b0;
    end
end

always @ (*) begin
    if ((((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in1_read = 1'b1;
    end else begin
        in1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in2_read = 1'b1;
    end else begin
        in2_read = 1'b0;
    end
end

always @ (*) begin
    if ((((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in3_read = 1'b1;
    end else begin
        in3_read = 1'b0;
    end
end

always @ (*) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_r_write = 1'b1;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln201_fu_187_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln201_fu_187_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln201_fu_193_p2 = (i_fu_58 + 9'd1);

assign add_ln202_1_fu_251_p2 = (trunc_ln202_4_fu_247_p1 + trunc_ln202_3_fu_238_p1);

assign add_ln202_fu_262_p2 = (trunc_ln202_2_reg_316 + trunc_ln202_1_reg_311);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (in3_empty_n == 1'b0) | (in2_empty_n == 1'b0) | (in1_empty_n == 1'b0) | (in0_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln201_fu_187_p2 = ((i_fu_58 == 9'd256) ? 1'b1 : 1'b0);

assign in0_read_read_fu_102_p2 = 2048'd0;

assign in1_read_read_fu_108_p2 = 2048'd0;

assign in2_read_read_fu_114_p2 = 2048'd0;

assign in3_read_read_fu_120_p2 = 2048'd0;

assign lshr_ln202_1_fu_224_p2 = in1_read_reg_288 >> zext_ln202_fu_211_p1;

assign lshr_ln202_2_fu_233_p2 = in2_read_reg_293 >> zext_ln202_fu_211_p1;

assign lshr_ln202_3_fu_242_p2 = in3_read_reg_298 >> zext_ln202_fu_211_p1;

assign lshr_ln202_fu_215_p2 = in0_read_reg_283 >> zext_ln202_fu_211_p1;

assign out_r_address0 = zext_ln203_fu_272_p1;

assign out_r_d0 = (add_ln202_1_reg_321 + add_ln202_fu_262_p2);

assign shl_ln_fu_203_p3 = {{trunc_ln202_fu_199_p1}, {3'd0}};

assign start_out = real_start;

assign trunc_ln202_1_fu_220_p1 = lshr_ln202_fu_215_p2[7:0];

assign trunc_ln202_2_fu_229_p1 = lshr_ln202_1_fu_224_p2[7:0];

assign trunc_ln202_3_fu_238_p1 = lshr_ln202_2_fu_233_p2[7:0];

assign trunc_ln202_4_fu_247_p1 = lshr_ln202_3_fu_242_p2[7:0];

assign trunc_ln202_fu_199_p1 = i_fu_58[7:0];

assign zext_ln202_fu_211_p1 = shl_ln_fu_203_p3;

assign zext_ln203_fu_272_p1 = trunc_ln202_reg_306;

always @ (posedge ap_clk) begin
    in0_read_reg_283[2047:0] <= 2048'b
    in1_read_reg_288[2047:0] <= 2048'b
    in2_read_reg_293[2047:0] <= 2048'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    in3_read_reg_298[2047:0] <= 2048'b
end

endmodule //accelerator_reduce
