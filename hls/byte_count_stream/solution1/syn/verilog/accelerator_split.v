// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accelerator_split (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        In_r_dout,
        In_r_empty_n,
        In_r_read,
        out0_address0,
        out0_ce0,
        out0_we0,
        out0_d0,
        out0_full_n,
        out0_write,
        out1_address0,
        out1_ce0,
        out1_we0,
        out1_d0,
        out1_full_n,
        out1_write,
        out2_address0,
        out2_ce0,
        out2_we0,
        out2_d0,
        out2_full_n,
        out2_write,
        out3_address0,
        out3_ce0,
        out3_we0,
        out3_d0,
        out3_full_n,
        out3_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] In_r_dout;
input   In_r_empty_n;
output   In_r_read;
output  [8:0] out0_address0;
output   out0_ce0;
output   out0_we0;
output  [7:0] out0_d0;
input   out0_full_n;
output   out0_write;
output  [8:0] out1_address0;
output   out1_ce0;
output   out1_we0;
output  [7:0] out1_d0;
input   out1_full_n;
output   out1_write;
output  [8:0] out2_address0;
output   out2_ce0;
output   out2_we0;
output  [7:0] out2_d0;
input   out2_full_n;
output   out2_write;
output  [8:0] out3_address0;
output   out3_ce0;
output   out3_we0;
output  [7:0] out3_d0;
input   out3_full_n;
output   out3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg In_r_read;
reg out0_ce0;
reg out0_we0;
reg out0_write;
reg out1_ce0;
reg out1_we0;
reg out1_write;
reg out2_ce0;
reg out2_we0;
reg out2_write;
reg out3_ce0;
reg out3_we0;
reg out3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    In_r_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire   [7:0] trunc_ln42_fu_210_p1;
reg   [7:0] trunc_ln42_reg_274;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln39_fu_198_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] zext_ln42_fu_224_p1;
reg   [8:0] i_fu_64;
wire   [8:0] add_ln39_fu_204_p2;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_64 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln39_fu_198_p2 == 1'd0))) begin
        i_fu_64 <= add_ln39_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_fu_198_p2 == 1'd0))) begin
        trunc_ln42_reg_274 <= trunc_ln42_fu_210_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_r_blk_n = In_r_empty_n;
    end else begin
        In_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_r_read = 1'b1;
    end else begin
        In_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_198_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out0_ce0 = 1'b1;
    end else begin
        out0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out0_we0 = 1'b1;
    end else begin
        out0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        out0_write = 1'b1;
    end else begin
        out0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out1_ce0 = 1'b1;
    end else begin
        out1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out1_we0 = 1'b1;
    end else begin
        out1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        out1_write = 1'b1;
    end else begin
        out1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out2_ce0 = 1'b1;
    end else begin
        out2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out2_we0 = 1'b1;
    end else begin
        out2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        out2_write = 1'b1;
    end else begin
        out2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out3_ce0 = 1'b1;
    end else begin
        out3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out3_we0 = 1'b1;
    end else begin
        out3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        out3_write = 1'b1;
    end else begin
        out3_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln39_fu_198_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln39_fu_198_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_fu_204_p2 = (i_fu_64 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == In_r_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == In_r_empty_n));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (1'b0 == In_r_empty_n);
end

always @ (*) begin
    ap_block_state4 = ((out3_full_n == 1'b0) | (out2_full_n == 1'b0) | (out1_full_n == 1'b0) | (out0_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln39_fu_198_p2 = ((i_fu_64 == 9'd256) ? 1'b1 : 1'b0);

assign out0_address0 = zext_ln42_fu_224_p1;

assign out0_d0 = In_r_dout[7:0];

assign out1_address0 = zext_ln42_fu_224_p1;

assign out1_d0 = {{In_r_dout[15:8]}};

assign out2_address0 = zext_ln42_fu_224_p1;

assign out2_d0 = {{In_r_dout[23:16]}};

assign out3_address0 = zext_ln42_fu_224_p1;

assign out3_d0 = {{In_r_dout[31:24]}};

assign start_out = real_start;

assign trunc_ln42_fu_210_p1 = i_fu_64[7:0];

assign zext_ln42_fu_224_p1 = trunc_ln42_reg_274;

endmodule //accelerator_split
