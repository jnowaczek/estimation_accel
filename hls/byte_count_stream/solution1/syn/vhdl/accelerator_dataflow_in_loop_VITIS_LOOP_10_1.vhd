-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_dataflow_in_loop_VITIS_LOOP_10_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    In_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    Out_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    Out_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    Out_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    Out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    Out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    Out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    Out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    counter : IN STD_LOGIC_VECTOR (31 downto 0);
    num_blocks : IN STD_LOGIC_VECTOR (31 downto 0);
    counter_ap_vld : IN STD_LOGIC;
    num_blocks_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    In_r_TVALID : IN STD_LOGIC;
    In_r_TREADY : OUT STD_LOGIC;
    Out_r_TVALID : OUT STD_LOGIC;
    Out_r_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of accelerator_dataflow_in_loop_VITIS_LOOP_10_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal appear_V_i_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal appear_V_i_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal appear_V_t_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal appear_V_t_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_counter_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_counter_c_write : STD_LOGIC;
    signal entry_proc_U0_num_blocks_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_num_blocks_c_write : STD_LOGIC;
    signal count_U0_ap_start : STD_LOGIC;
    signal count_U0_ap_done : STD_LOGIC;
    signal count_U0_ap_continue : STD_LOGIC;
    signal count_U0_ap_idle : STD_LOGIC;
    signal count_U0_ap_ready : STD_LOGIC;
    signal count_U0_In_r_TREADY : STD_LOGIC;
    signal count_U0_appear_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_U0_appear_ce0 : STD_LOGIC;
    signal count_U0_appear_we0 : STD_LOGIC;
    signal count_U0_appear_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal count_U0_appear_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_U0_appear_ce1 : STD_LOGIC;
    signal count_U0_appear_we1 : STD_LOGIC;
    signal count_U0_appear_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal threshold_U0_ap_start : STD_LOGIC;
    signal threshold_U0_ap_done : STD_LOGIC;
    signal threshold_U0_ap_continue : STD_LOGIC;
    signal threshold_U0_ap_idle : STD_LOGIC;
    signal threshold_U0_ap_ready : STD_LOGIC;
    signal threshold_U0_appear_V1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold_U0_appear_V1_ce0 : STD_LOGIC;
    signal threshold_U0_Out_r_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold_U0_Out_r_TVALID : STD_LOGIC;
    signal threshold_U0_Out_r_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_U0_Out_r_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_U0_Out_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_U0_Out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_U0_Out_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_U0_Out_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_U0_counter_read : STD_LOGIC;
    signal threshold_U0_num_blocks_read : STD_LOGIC;
    signal appear_V_i_full_n : STD_LOGIC;
    signal appear_V_t_empty_n : STD_LOGIC;
    signal counter_c_full_n : STD_LOGIC;
    signal counter_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal counter_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal counter_c_empty_n : STD_LOGIC;
    signal num_blocks_c_full_n : STD_LOGIC;
    signal num_blocks_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal num_blocks_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal num_blocks_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_count_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_count_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        counter : IN STD_LOGIC_VECTOR (31 downto 0);
        counter_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        counter_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        counter_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        counter_c_full_n : IN STD_LOGIC;
        counter_c_write : OUT STD_LOGIC;
        num_blocks : IN STD_LOGIC_VECTOR (31 downto 0);
        num_blocks_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_blocks_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        num_blocks_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        num_blocks_c_full_n : IN STD_LOGIC;
        num_blocks_c_write : OUT STD_LOGIC );
    end component;


    component accelerator_count IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        In_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        In_r_TVALID : IN STD_LOGIC;
        In_r_TREADY : OUT STD_LOGIC;
        appear_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appear_ce0 : OUT STD_LOGIC;
        appear_we0 : OUT STD_LOGIC;
        appear_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        appear_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appear_ce1 : OUT STD_LOGIC;
        appear_we1 : OUT STD_LOGIC;
        appear_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        appear_q1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component accelerator_threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        appear_V1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appear_V1_ce0 : OUT STD_LOGIC;
        appear_V1_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        Out_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        Out_r_TVALID : OUT STD_LOGIC;
        Out_r_TREADY : IN STD_LOGIC;
        Out_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        Out_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        Out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        Out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        Out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        Out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        counter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        counter_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        counter_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        counter_empty_n : IN STD_LOGIC;
        counter_read : OUT STD_LOGIC;
        num_blocks_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_blocks_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        num_blocks_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        num_blocks_empty_n : IN STD_LOGIC;
        num_blocks_read : OUT STD_LOGIC );
    end component;


    component accelerator_dataflow_in_loop_VITIS_LOOP_10_1_appear_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (2 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (2 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component accelerator_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    appear_V_U : component accelerator_dataflow_in_loop_VITIS_LOOP_10_1_appear_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 3,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => count_U0_appear_address0,
        i_ce0 => count_U0_appear_ce0,
        i_we0 => count_U0_appear_we0,
        i_d0 => count_U0_appear_d0,
        i_q0 => appear_V_i_q0,
        i_address1 => count_U0_appear_address1,
        i_ce1 => count_U0_appear_ce1,
        i_we1 => count_U0_appear_we1,
        i_d1 => count_U0_appear_d1,
        i_q1 => appear_V_i_q1,
        t_address0 => threshold_U0_appear_V1_address0,
        t_ce0 => threshold_U0_appear_V1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv3_0,
        t_q0 => appear_V_t_q0,
        t_address1 => ap_const_lv8_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv3_0,
        t_q1 => appear_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => appear_V_i_full_n,
        i_write => count_U0_ap_done,
        t_empty_n => appear_V_t_empty_n,
        t_read => threshold_U0_ap_ready);

    entry_proc_U0 : component accelerator_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        counter => counter,
        counter_c_din => entry_proc_U0_counter_c_din,
        counter_c_num_data_valid => counter_c_num_data_valid,
        counter_c_fifo_cap => counter_c_fifo_cap,
        counter_c_full_n => counter_c_full_n,
        counter_c_write => entry_proc_U0_counter_c_write,
        num_blocks => num_blocks,
        num_blocks_c_din => entry_proc_U0_num_blocks_c_din,
        num_blocks_c_num_data_valid => num_blocks_c_num_data_valid,
        num_blocks_c_fifo_cap => num_blocks_c_fifo_cap,
        num_blocks_c_full_n => num_blocks_c_full_n,
        num_blocks_c_write => entry_proc_U0_num_blocks_c_write);

    count_U0 : component accelerator_count
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => count_U0_ap_start,
        ap_done => count_U0_ap_done,
        ap_continue => count_U0_ap_continue,
        ap_idle => count_U0_ap_idle,
        ap_ready => count_U0_ap_ready,
        In_r_TDATA => In_r_TDATA,
        In_r_TVALID => In_r_TVALID,
        In_r_TREADY => count_U0_In_r_TREADY,
        appear_address0 => count_U0_appear_address0,
        appear_ce0 => count_U0_appear_ce0,
        appear_we0 => count_U0_appear_we0,
        appear_d0 => count_U0_appear_d0,
        appear_address1 => count_U0_appear_address1,
        appear_ce1 => count_U0_appear_ce1,
        appear_we1 => count_U0_appear_we1,
        appear_d1 => count_U0_appear_d1,
        appear_q1 => appear_V_i_q1);

    threshold_U0 : component accelerator_threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => threshold_U0_ap_start,
        ap_done => threshold_U0_ap_done,
        ap_continue => threshold_U0_ap_continue,
        ap_idle => threshold_U0_ap_idle,
        ap_ready => threshold_U0_ap_ready,
        appear_V1_address0 => threshold_U0_appear_V1_address0,
        appear_V1_ce0 => threshold_U0_appear_V1_ce0,
        appear_V1_q0 => appear_V_t_q0,
        Out_r_TDATA => threshold_U0_Out_r_TDATA,
        Out_r_TVALID => threshold_U0_Out_r_TVALID,
        Out_r_TREADY => Out_r_TREADY,
        Out_r_TKEEP => threshold_U0_Out_r_TKEEP,
        Out_r_TSTRB => threshold_U0_Out_r_TSTRB,
        Out_r_TUSER => threshold_U0_Out_r_TUSER,
        Out_r_TLAST => threshold_U0_Out_r_TLAST,
        Out_r_TID => threshold_U0_Out_r_TID,
        Out_r_TDEST => threshold_U0_Out_r_TDEST,
        counter_dout => counter_c_dout,
        counter_num_data_valid => counter_c_num_data_valid,
        counter_fifo_cap => counter_c_fifo_cap,
        counter_empty_n => counter_c_empty_n,
        counter_read => threshold_U0_counter_read,
        num_blocks_dout => num_blocks_c_dout,
        num_blocks_num_data_valid => num_blocks_c_num_data_valid,
        num_blocks_fifo_cap => num_blocks_c_fifo_cap,
        num_blocks_empty_n => num_blocks_c_empty_n,
        num_blocks_read => threshold_U0_num_blocks_read);

    counter_c_U : component accelerator_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_counter_c_din,
        if_full_n => counter_c_full_n,
        if_write => entry_proc_U0_counter_c_write,
        if_dout => counter_c_dout,
        if_num_data_valid => counter_c_num_data_valid,
        if_fifo_cap => counter_c_fifo_cap,
        if_empty_n => counter_c_empty_n,
        if_read => threshold_U0_counter_read);

    num_blocks_c_U : component accelerator_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_num_blocks_c_din,
        if_full_n => num_blocks_c_full_n,
        if_write => entry_proc_U0_num_blocks_c_write,
        if_dout => num_blocks_c_dout,
        if_num_data_valid => num_blocks_c_num_data_valid,
        if_fifo_cap => num_blocks_c_fifo_cap,
        if_empty_n => num_blocks_c_empty_n,
        if_read => threshold_U0_num_blocks_read);





    ap_sync_reg_count_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_count_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_count_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_count_U0_ap_ready <= ap_sync_count_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    In_r_TREADY <= count_U0_In_r_TREADY;
    Out_r_TDATA <= threshold_U0_Out_r_TDATA;
    Out_r_TDEST <= threshold_U0_Out_r_TDEST;
    Out_r_TID <= threshold_U0_Out_r_TID;
    Out_r_TKEEP <= threshold_U0_Out_r_TKEEP;
    Out_r_TLAST <= threshold_U0_Out_r_TLAST;
    Out_r_TSTRB <= threshold_U0_Out_r_TSTRB;
    Out_r_TUSER <= threshold_U0_Out_r_TUSER;
    Out_r_TVALID <= threshold_U0_Out_r_TVALID;
    ap_done <= threshold_U0_ap_done;
    ap_idle <= (threshold_U0_ap_idle and (appear_V_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and count_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_count_U0_ap_ready <= (count_U0_ap_ready or ap_sync_reg_count_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_count_U0_ap_ready);
    count_U0_ap_continue <= appear_V_i_full_n;
    count_U0_ap_start <= ((ap_sync_reg_count_U0_ap_ready xor ap_const_logic_1) and ap_start);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    threshold_U0_ap_continue <= ap_continue;
    threshold_U0_ap_start <= appear_V_t_empty_n;
end behav;
