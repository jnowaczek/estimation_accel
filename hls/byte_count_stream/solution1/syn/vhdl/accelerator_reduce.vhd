-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_reduce is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in0 : IN STD_LOGIC_VECTOR (2047 downto 0);
    in1 : IN STD_LOGIC_VECTOR (2047 downto 0);
    in2 : IN STD_LOGIC_VECTOR (2047 downto 0);
    in3 : IN STD_LOGIC_VECTOR (2047 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC;
    in0_empty_n : IN STD_LOGIC;
    in1_empty_n : IN STD_LOGIC;
    in2_empty_n : IN STD_LOGIC;
    in3_empty_n : IN STD_LOGIC;
    in0_read : OUT STD_LOGIC;
    in1_read : OUT STD_LOGIC;
    in2_read : OUT STD_LOGIC;
    in3_read : OUT STD_LOGIC );
end;


architecture behav of accelerator_reduce is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in0_read_read_fu_102_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in0_read_reg_283 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in1_read_read_fu_108_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in1_read_reg_288 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in2_read_read_fu_114_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in2_read_reg_293 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in3_read_read_fu_120_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal in3_read_reg_298 : STD_LOGIC_VECTOR (2047 downto 0);
    signal trunc_ln202_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln202_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln201_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln202_1_fu_220_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln202_1_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln202_2_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln202_2_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln202_1_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln202_1_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln203_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_58 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln201_fu_193_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln_fu_203_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln202_fu_211_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln202_fu_215_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln202_1_fu_224_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln202_2_fu_233_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln202_3_fu_242_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal trunc_ln202_4_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln202_3_fu_238_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln202_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_58 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln201_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_58 <= add_ln201_fu_193_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln201_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln202_1_reg_321 <= add_ln202_1_fu_251_p2;
                trunc_ln202_1_reg_311 <= trunc_ln202_1_fu_220_p1;
                trunc_ln202_2_reg_316 <= trunc_ln202_2_fu_229_p1;
                trunc_ln202_reg_306 <= trunc_ln202_fu_199_p1;
            end if;
        end if;
    end process;
    in0_read_reg_283(2047 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    in1_read_reg_288(2047 downto
    in2_read_reg_293(2047 downto
    in3_read_reg_298(2047 downto

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_r_full_n, icmp_ln201_fu_187_p2, ap_enable_reg_pp0_iter0, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n, ap_block_pp0_stage0_subdone, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln201_fu_187_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln201_fu_187_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln201_fu_193_p2 <= std_logic_vector(unsigned(i_fu_58) + unsigned(ap_const_lv9_1));
    add_ln202_1_fu_251_p2 <= std_logic_vector(unsigned(trunc_ln202_4_fu_247_p1) + unsigned(trunc_ln202_3_fu_238_p1));
    add_ln202_fu_262_p2 <= std_logic_vector(unsigned(trunc_ln202_2_reg_316) + unsigned(trunc_ln202_1_reg_311));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(out_r_full_n)
    begin
        if ((out_r_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln201_fu_187_p2)
    begin
        if ((icmp_ln201_fu_187_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_r_full_n, ap_CS_fsm_state4)
    begin
        if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln201_fu_187_p2 <= "1" when (i_fu_58 = ap_const_lv9_100) else "0";

    in0_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_r_full_n, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n, ap_CS_fsm_state4)
    begin
        if ((((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in0_read <= ap_const_logic_1;
        else 
            in0_read <= ap_const_logic_0;
        end if; 
    end process;

    in0_read_read_fu_102_p2 <= ap_const_lv2048_lc_1;

    in1_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_r_full_n, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n, ap_CS_fsm_state4)
    begin
        if ((((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in1_read <= ap_const_logic_1;
        else 
            in1_read <= ap_const_logic_0;
        end if; 
    end process;

    in1_read_read_fu_108_p2 <= ap_const_lv2048_lc_1;

    in2_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_r_full_n, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n, ap_CS_fsm_state4)
    begin
        if ((((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in2_read <= ap_const_logic_1;
        else 
            in2_read <= ap_const_logic_0;
        end if; 
    end process;

    in2_read_read_fu_114_p2 <= ap_const_lv2048_lc_1;

    in3_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_r_full_n, in0_empty_n, in1_empty_n, in2_empty_n, in3_empty_n, ap_CS_fsm_state4)
    begin
        if ((((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((real_start = ap_const_logic_0) or (in3_empty_n = ap_const_logic_0) or (in2_empty_n = ap_const_logic_0) or (in1_empty_n = ap_const_logic_0) or (in0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in3_read <= ap_const_logic_1;
        else 
            in3_read <= ap_const_logic_0;
        end if; 
    end process;

    in3_read_read_fu_120_p2 <= ap_const_lv2048_lc_1;

    internal_ap_ready_assign_proc : process(out_r_full_n, ap_CS_fsm_state4)
    begin
        if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln202_1_fu_224_p2 <= std_logic_vector(shift_right(unsigned(in1_read_reg_288),to_integer(unsigned('0' & zext_ln202_fu_211_p1(31-1 downto 0)))));
    lshr_ln202_2_fu_233_p2 <= std_logic_vector(shift_right(unsigned(in2_read_reg_293),to_integer(unsigned('0' & zext_ln202_fu_211_p1(31-1 downto 0)))));
    lshr_ln202_3_fu_242_p2 <= std_logic_vector(shift_right(unsigned(in3_read_reg_298),to_integer(unsigned('0' & zext_ln202_fu_211_p1(31-1 downto 0)))));
    lshr_ln202_fu_215_p2 <= std_logic_vector(shift_right(unsigned(in0_read_reg_283),to_integer(unsigned('0' & zext_ln202_fu_211_p1(31-1 downto 0)))));
    out_r_address0 <= zext_ln203_fu_272_p1(8 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(unsigned(add_ln202_1_reg_321) + unsigned(add_ln202_fu_262_p2));

    out_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_write_assign_proc : process(out_r_full_n, ap_CS_fsm_state4)
    begin
        if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    shl_ln_fu_203_p3 <= (trunc_ln202_fu_199_p1 & ap_const_lv3_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln202_1_fu_220_p1 <= lshr_ln202_fu_215_p2(8 - 1 downto 0);
    trunc_ln202_2_fu_229_p1 <= lshr_ln202_1_fu_224_p2(8 - 1 downto 0);
    trunc_ln202_3_fu_238_p1 <= lshr_ln202_2_fu_233_p2(8 - 1 downto 0);
    trunc_ln202_4_fu_247_p1 <= lshr_ln202_3_fu_242_p2(8 - 1 downto 0);
    trunc_ln202_fu_199_p1 <= i_fu_58(8 - 1 downto 0);
    zext_ln202_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_203_p3),2048));
    zext_ln203_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln202_reg_306),32));
end behav;
