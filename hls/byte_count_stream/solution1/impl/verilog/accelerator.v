// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="accelerator_accelerator,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.996000,HLS_SYN_LAT=2579,HLS_SYN_TPT=1033,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2322,HLS_SYN_LUT=17570,HLS_VERSION=2022_1}" *)

module accelerator (
        ap_clk,
        ap_rst,
        In_r_dout,
        In_r_empty_n,
        In_r_read,
        Out_r_din,
        Out_r_full_n,
        Out_r_write,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [7:0] In_r_dout;
input   In_r_empty_n;
output   In_r_read;
output  [31:0] Out_r_din;
input   Out_r_full_n;
output   Out_r_write;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [7:0] input_blocks_buf_data_i_q0;
wire   [7:0] input_blocks_buf_data_t_q0;
wire   [7:0] reduced_blocks_buf_data_i_q0;
wire   [7:0] reduced_blocks_buf_data_t_q0;
wire    split_U0_ap_start;
wire    split_U0_ap_done;
wire    split_U0_ap_continue;
wire    split_U0_ap_idle;
wire    split_U0_ap_ready;
wire    split_U0_start_out;
wire    split_U0_start_write;
wire    split_U0_In_r_read;
wire   [9:0] split_U0_out_r_address0;
wire    split_U0_out_r_ce0;
wire    split_U0_out_r_we0;
wire   [7:0] split_U0_out_r_d0;
wire    split_U0_out_r_write;
wire    count_U0_ap_start;
wire    count_U0_ap_done;
wire    count_U0_ap_continue;
wire    count_U0_ap_idle;
wire    count_U0_ap_ready;
wire   [9:0] count_U0_in_r_address0;
wire    count_U0_in_r_ce0;
wire    count_U0_in_r_read;
wire   [2047:0] count_U0_out_r;
wire    count_U0_out_r_write;
wire    count_blocks_channel_full_n;
wire    reduce_U0_ap_start;
wire    reduce_U0_ap_done;
wire    reduce_U0_ap_continue;
wire    reduce_U0_ap_idle;
wire    reduce_U0_ap_ready;
wire    reduce_U0_start_out;
wire    reduce_U0_start_write;
wire   [7:0] reduce_U0_out_r_address0;
wire    reduce_U0_out_r_ce0;
wire    reduce_U0_out_r_we0;
wire   [7:0] reduce_U0_out_r_d0;
wire    reduce_U0_out_r_write;
wire    reduce_U0_in_r_read;
wire    threshold_U0_ap_start;
wire    threshold_U0_ap_done;
wire    threshold_U0_ap_continue;
wire    threshold_U0_ap_idle;
wire    threshold_U0_ap_ready;
wire   [7:0] threshold_U0_in_r_address0;
wire    threshold_U0_in_r_ce0;
wire    threshold_U0_in_r_read;
wire   [31:0] threshold_U0_Out_r_din;
wire    threshold_U0_Out_r_write;
wire    input_blocks_buf_data_i_full_n;
wire    input_blocks_buf_data_t_empty_n;
wire    reduced_blocks_buf_data_i_full_n;
wire    reduced_blocks_buf_data_t_empty_n;
wire   [2047:0] count_blocks_channel_dout;
wire   [1:0] count_blocks_channel_num_data_valid;
wire   [1:0] count_blocks_channel_fifo_cap;
wire    count_blocks_channel_empty_n;
wire   [0:0] start_for_count_U0_din;
wire    start_for_count_U0_full_n;
wire   [0:0] start_for_count_U0_dout;
wire    start_for_count_U0_empty_n;
wire   [0:0] start_for_threshold_U0_din;
wire    start_for_threshold_U0_full_n;
wire   [0:0] start_for_threshold_U0_dout;
wire    start_for_threshold_U0_empty_n;

accelerator_input_blocks_buf_data_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_blocks_buf_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(split_U0_out_r_address0),
    .i_ce0(split_U0_out_r_ce0),
    .i_we0(split_U0_out_r_we0),
    .i_d0(split_U0_out_r_d0),
    .i_q0(input_blocks_buf_data_i_q0),
    .t_address0(count_U0_in_r_address0),
    .t_ce0(count_U0_in_r_ce0),
    .t_we0(1'b0),
    .t_d0(8'd0),
    .t_q0(input_blocks_buf_data_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(input_blocks_buf_data_i_full_n),
    .i_write(split_U0_out_r_write),
    .t_empty_n(input_blocks_buf_data_t_empty_n),
    .t_read(count_U0_in_r_read)
);

accelerator_reduced_blocks_buf_data_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
reduced_blocks_buf_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(reduce_U0_out_r_address0),
    .i_ce0(reduce_U0_out_r_ce0),
    .i_we0(reduce_U0_out_r_we0),
    .i_d0(reduce_U0_out_r_d0),
    .i_q0(reduced_blocks_buf_data_i_q0),
    .t_address0(threshold_U0_in_r_address0),
    .t_ce0(threshold_U0_in_r_ce0),
    .t_we0(1'b0),
    .t_d0(8'd0),
    .t_q0(reduced_blocks_buf_data_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(reduced_blocks_buf_data_i_full_n),
    .i_write(reduce_U0_out_r_write),
    .t_empty_n(reduced_blocks_buf_data_t_empty_n),
    .t_read(threshold_U0_in_r_read)
);

accelerator_split split_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(split_U0_ap_start),
    .start_full_n(start_for_count_U0_full_n),
    .ap_done(split_U0_ap_done),
    .ap_continue(split_U0_ap_continue),
    .ap_idle(split_U0_ap_idle),
    .ap_ready(split_U0_ap_ready),
    .start_out(split_U0_start_out),
    .start_write(split_U0_start_write),
    .In_r_dout(In_r_dout),
    .In_r_empty_n(In_r_empty_n),
    .In_r_read(split_U0_In_r_read),
    .out_r_address0(split_U0_out_r_address0),
    .out_r_ce0(split_U0_out_r_ce0),
    .out_r_we0(split_U0_out_r_we0),
    .out_r_d0(split_U0_out_r_d0),
    .out_r_full_n(input_blocks_buf_data_i_full_n),
    .out_r_write(split_U0_out_r_write)
);

accelerator_count count_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(count_U0_ap_start),
    .ap_done(count_U0_ap_done),
    .ap_continue(count_U0_ap_continue),
    .ap_idle(count_U0_ap_idle),
    .ap_ready(count_U0_ap_ready),
    .in_r_address0(count_U0_in_r_address0),
    .in_r_ce0(count_U0_in_r_ce0),
    .in_r_q0(input_blocks_buf_data_t_q0),
    .in_r_empty_n(input_blocks_buf_data_t_empty_n),
    .in_r_read(count_U0_in_r_read),
    .out_r(count_U0_out_r),
    .out_r_write(count_U0_out_r_write),
    .out_r_full_n(1'b0)
);

accelerator_reduce reduce_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reduce_U0_ap_start),
    .start_full_n(start_for_threshold_U0_full_n),
    .ap_done(reduce_U0_ap_done),
    .ap_continue(reduce_U0_ap_continue),
    .ap_idle(reduce_U0_ap_idle),
    .ap_ready(reduce_U0_ap_ready),
    .start_out(reduce_U0_start_out),
    .start_write(reduce_U0_start_write),
    .in_r(count_blocks_channel_dout),
    .out_r_address0(reduce_U0_out_r_address0),
    .out_r_ce0(reduce_U0_out_r_ce0),
    .out_r_we0(reduce_U0_out_r_we0),
    .out_r_d0(reduce_U0_out_r_d0),
    .out_r_full_n(reduced_blocks_buf_data_i_full_n),
    .out_r_write(reduce_U0_out_r_write),
    .in_r_empty_n(1'b0),
    .in_r_read(reduce_U0_in_r_read)
);

accelerator_threshold threshold_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(threshold_U0_ap_start),
    .ap_done(threshold_U0_ap_done),
    .ap_continue(threshold_U0_ap_continue),
    .ap_idle(threshold_U0_ap_idle),
    .ap_ready(threshold_U0_ap_ready),
    .in_r_address0(threshold_U0_in_r_address0),
    .in_r_ce0(threshold_U0_in_r_ce0),
    .in_r_q0(reduced_blocks_buf_data_t_q0),
    .in_r_empty_n(reduced_blocks_buf_data_t_empty_n),
    .in_r_read(threshold_U0_in_r_read),
    .Out_r_din(threshold_U0_Out_r_din),
    .Out_r_full_n(Out_r_full_n),
    .Out_r_write(threshold_U0_Out_r_write)
);

accelerator_fifo_w2048_d2_S count_blocks_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(count_U0_out_r),
    .if_full_n(count_blocks_channel_full_n),
    .if_write(count_U0_ap_done),
    .if_dout(count_blocks_channel_dout),
    .if_num_data_valid(count_blocks_channel_num_data_valid),
    .if_fifo_cap(count_blocks_channel_fifo_cap),
    .if_empty_n(count_blocks_channel_empty_n),
    .if_read(reduce_U0_ap_ready)
);

accelerator_start_for_count_U0 start_for_count_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_count_U0_din),
    .if_full_n(start_for_count_U0_full_n),
    .if_write(split_U0_start_write),
    .if_dout(start_for_count_U0_dout),
    .if_empty_n(start_for_count_U0_empty_n),
    .if_read(count_U0_ap_ready)
);

accelerator_start_for_threshold_U0 start_for_threshold_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_threshold_U0_din),
    .if_full_n(start_for_threshold_U0_full_n),
    .if_write(reduce_U0_start_write),
    .if_dout(start_for_threshold_U0_dout),
    .if_empty_n(start_for_threshold_U0_empty_n),
    .if_read(threshold_U0_ap_ready)
);

assign In_r_read = split_U0_In_r_read;

assign Out_r_din = threshold_U0_Out_r_din;

assign Out_r_write = threshold_U0_Out_r_write;

assign ap_done = threshold_U0_ap_done;

assign ap_idle = (threshold_U0_ap_idle & split_U0_ap_idle & reduce_U0_ap_idle & (count_blocks_channel_empty_n ^ 1'b1) & (reduced_blocks_buf_data_t_empty_n ^ 1'b1) & (input_blocks_buf_data_t_empty_n ^ 1'b1) & count_U0_ap_idle);

assign ap_ready = split_U0_ap_ready;

assign count_U0_ap_continue = count_blocks_channel_full_n;

assign count_U0_ap_start = start_for_count_U0_empty_n;

assign reduce_U0_ap_continue = 1'b1;

assign reduce_U0_ap_start = count_blocks_channel_empty_n;

assign split_U0_ap_continue = 1'b1;

assign split_U0_ap_start = ap_start;

assign start_for_count_U0_din = 1'b1;

assign start_for_threshold_U0_din = 1'b1;

assign threshold_U0_ap_continue = ap_continue;

assign threshold_U0_ap_start = start_for_threshold_U0_empty_n;

endmodule //accelerator
