-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    In_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    In_r_empty_n : IN STD_LOGIC;
    In_r_read : OUT STD_LOGIC;
    Out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_r_full_n : IN STD_LOGIC;
    Out_r_write : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of accelerator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "accelerator_accelerator,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.996000,HLS_SYN_LAT=2579,HLS_SYN_TPT=1033,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2322,HLS_SYN_LUT=17570,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal input_blocks_buf_data_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_blocks_buf_data_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduced_blocks_buf_data_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduced_blocks_buf_data_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_ap_start : STD_LOGIC;
    signal split_U0_ap_done : STD_LOGIC;
    signal split_U0_ap_continue : STD_LOGIC;
    signal split_U0_ap_idle : STD_LOGIC;
    signal split_U0_ap_ready : STD_LOGIC;
    signal split_U0_start_out : STD_LOGIC;
    signal split_U0_start_write : STD_LOGIC;
    signal split_U0_In_r_read : STD_LOGIC;
    signal split_U0_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal split_U0_out_r_ce0 : STD_LOGIC;
    signal split_U0_out_r_we0 : STD_LOGIC;
    signal split_U0_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_out_r_write : STD_LOGIC;
    signal count_U0_ap_start : STD_LOGIC;
    signal count_U0_ap_done : STD_LOGIC;
    signal count_U0_ap_continue : STD_LOGIC;
    signal count_U0_ap_idle : STD_LOGIC;
    signal count_U0_ap_ready : STD_LOGIC;
    signal count_U0_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal count_U0_in_r_ce0 : STD_LOGIC;
    signal count_U0_in_r_read : STD_LOGIC;
    signal count_U0_out_r : STD_LOGIC_VECTOR (2047 downto 0);
    signal count_U0_out_r_write : STD_LOGIC;
    signal count_blocks_channel_full_n : STD_LOGIC;
    signal reduce_U0_ap_start : STD_LOGIC;
    signal reduce_U0_ap_done : STD_LOGIC;
    signal reduce_U0_ap_continue : STD_LOGIC;
    signal reduce_U0_ap_idle : STD_LOGIC;
    signal reduce_U0_ap_ready : STD_LOGIC;
    signal reduce_U0_start_out : STD_LOGIC;
    signal reduce_U0_start_write : STD_LOGIC;
    signal reduce_U0_out_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_U0_out_r_ce0 : STD_LOGIC;
    signal reduce_U0_out_r_we0 : STD_LOGIC;
    signal reduce_U0_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_U0_out_r_write : STD_LOGIC;
    signal reduce_U0_in_r_read : STD_LOGIC;
    signal threshold_U0_ap_start : STD_LOGIC;
    signal threshold_U0_ap_done : STD_LOGIC;
    signal threshold_U0_ap_continue : STD_LOGIC;
    signal threshold_U0_ap_idle : STD_LOGIC;
    signal threshold_U0_ap_ready : STD_LOGIC;
    signal threshold_U0_in_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold_U0_in_r_ce0 : STD_LOGIC;
    signal threshold_U0_in_r_read : STD_LOGIC;
    signal threshold_U0_Out_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_U0_Out_r_write : STD_LOGIC;
    signal input_blocks_buf_data_i_full_n : STD_LOGIC;
    signal input_blocks_buf_data_t_empty_n : STD_LOGIC;
    signal reduced_blocks_buf_data_i_full_n : STD_LOGIC;
    signal reduced_blocks_buf_data_t_empty_n : STD_LOGIC;
    signal count_blocks_channel_dout : STD_LOGIC_VECTOR (2047 downto 0);
    signal count_blocks_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal count_blocks_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal count_blocks_channel_empty_n : STD_LOGIC;
    signal start_for_count_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_count_U0_full_n : STD_LOGIC;
    signal start_for_count_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_count_U0_empty_n : STD_LOGIC;
    signal start_for_threshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_threshold_U0_full_n : STD_LOGIC;
    signal start_for_threshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_threshold_U0_empty_n : STD_LOGIC;

    component accelerator_split IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        In_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        In_r_empty_n : IN STD_LOGIC;
        In_r_read : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC );
    end component;


    component accelerator_count IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        out_r : OUT STD_LOGIC_VECTOR (2047 downto 0);
        out_r_write : OUT STD_LOGIC;
        out_r_full_n : IN STD_LOGIC );
    end component;


    component accelerator_reduce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (2047 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC;
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC );
    end component;


    component accelerator_threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        Out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Out_r_full_n : IN STD_LOGIC;
        Out_r_write : OUT STD_LOGIC );
    end component;


    component accelerator_input_blocks_buf_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component accelerator_reduced_blocks_buf_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component accelerator_fifo_w2048_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (2047 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (2047 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component accelerator_start_for_count_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component accelerator_start_for_threshold_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    input_blocks_buf_data_U : component accelerator_input_blocks_buf_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => split_U0_out_r_address0,
        i_ce0 => split_U0_out_r_ce0,
        i_we0 => split_U0_out_r_we0,
        i_d0 => split_U0_out_r_d0,
        i_q0 => input_blocks_buf_data_i_q0,
        t_address0 => count_U0_in_r_address0,
        t_ce0 => count_U0_in_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input_blocks_buf_data_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_blocks_buf_data_i_full_n,
        i_write => split_U0_out_r_write,
        t_empty_n => input_blocks_buf_data_t_empty_n,
        t_read => count_U0_in_r_read);

    reduced_blocks_buf_data_U : component accelerator_reduced_blocks_buf_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => reduce_U0_out_r_address0,
        i_ce0 => reduce_U0_out_r_ce0,
        i_we0 => reduce_U0_out_r_we0,
        i_d0 => reduce_U0_out_r_d0,
        i_q0 => reduced_blocks_buf_data_i_q0,
        t_address0 => threshold_U0_in_r_address0,
        t_ce0 => threshold_U0_in_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => reduced_blocks_buf_data_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => reduced_blocks_buf_data_i_full_n,
        i_write => reduce_U0_out_r_write,
        t_empty_n => reduced_blocks_buf_data_t_empty_n,
        t_read => threshold_U0_in_r_read);

    split_U0 : component accelerator_split
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => split_U0_ap_start,
        start_full_n => start_for_count_U0_full_n,
        ap_done => split_U0_ap_done,
        ap_continue => split_U0_ap_continue,
        ap_idle => split_U0_ap_idle,
        ap_ready => split_U0_ap_ready,
        start_out => split_U0_start_out,
        start_write => split_U0_start_write,
        In_r_dout => In_r_dout,
        In_r_empty_n => In_r_empty_n,
        In_r_read => split_U0_In_r_read,
        out_r_address0 => split_U0_out_r_address0,
        out_r_ce0 => split_U0_out_r_ce0,
        out_r_we0 => split_U0_out_r_we0,
        out_r_d0 => split_U0_out_r_d0,
        out_r_full_n => input_blocks_buf_data_i_full_n,
        out_r_write => split_U0_out_r_write);

    count_U0 : component accelerator_count
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => count_U0_ap_start,
        ap_done => count_U0_ap_done,
        ap_continue => count_U0_ap_continue,
        ap_idle => count_U0_ap_idle,
        ap_ready => count_U0_ap_ready,
        in_r_address0 => count_U0_in_r_address0,
        in_r_ce0 => count_U0_in_r_ce0,
        in_r_q0 => input_blocks_buf_data_t_q0,
        in_r_empty_n => input_blocks_buf_data_t_empty_n,
        in_r_read => count_U0_in_r_read,
        out_r => count_U0_out_r,
        out_r_write => count_U0_out_r_write,
        out_r_full_n => ap_const_logic_0);

    reduce_U0 : component accelerator_reduce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => reduce_U0_ap_start,
        start_full_n => start_for_threshold_U0_full_n,
        ap_done => reduce_U0_ap_done,
        ap_continue => reduce_U0_ap_continue,
        ap_idle => reduce_U0_ap_idle,
        ap_ready => reduce_U0_ap_ready,
        start_out => reduce_U0_start_out,
        start_write => reduce_U0_start_write,
        in_r => count_blocks_channel_dout,
        out_r_address0 => reduce_U0_out_r_address0,
        out_r_ce0 => reduce_U0_out_r_ce0,
        out_r_we0 => reduce_U0_out_r_we0,
        out_r_d0 => reduce_U0_out_r_d0,
        out_r_full_n => reduced_blocks_buf_data_i_full_n,
        out_r_write => reduce_U0_out_r_write,
        in_r_empty_n => ap_const_logic_0,
        in_r_read => reduce_U0_in_r_read);

    threshold_U0 : component accelerator_threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => threshold_U0_ap_start,
        ap_done => threshold_U0_ap_done,
        ap_continue => threshold_U0_ap_continue,
        ap_idle => threshold_U0_ap_idle,
        ap_ready => threshold_U0_ap_ready,
        in_r_address0 => threshold_U0_in_r_address0,
        in_r_ce0 => threshold_U0_in_r_ce0,
        in_r_q0 => reduced_blocks_buf_data_t_q0,
        in_r_empty_n => reduced_blocks_buf_data_t_empty_n,
        in_r_read => threshold_U0_in_r_read,
        Out_r_din => threshold_U0_Out_r_din,
        Out_r_full_n => Out_r_full_n,
        Out_r_write => threshold_U0_Out_r_write);

    count_blocks_channel_U : component accelerator_fifo_w2048_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => count_U0_out_r,
        if_full_n => count_blocks_channel_full_n,
        if_write => count_U0_ap_done,
        if_dout => count_blocks_channel_dout,
        if_num_data_valid => count_blocks_channel_num_data_valid,
        if_fifo_cap => count_blocks_channel_fifo_cap,
        if_empty_n => count_blocks_channel_empty_n,
        if_read => reduce_U0_ap_ready);

    start_for_count_U0_U : component accelerator_start_for_count_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_count_U0_din,
        if_full_n => start_for_count_U0_full_n,
        if_write => split_U0_start_write,
        if_dout => start_for_count_U0_dout,
        if_empty_n => start_for_count_U0_empty_n,
        if_read => count_U0_ap_ready);

    start_for_threshold_U0_U : component accelerator_start_for_threshold_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_threshold_U0_din,
        if_full_n => start_for_threshold_U0_full_n,
        if_write => reduce_U0_start_write,
        if_dout => start_for_threshold_U0_dout,
        if_empty_n => start_for_threshold_U0_empty_n,
        if_read => threshold_U0_ap_ready);




    In_r_read <= split_U0_In_r_read;
    Out_r_din <= threshold_U0_Out_r_din;
    Out_r_write <= threshold_U0_Out_r_write;
    ap_done <= threshold_U0_ap_done;
    ap_idle <= (threshold_U0_ap_idle and split_U0_ap_idle and reduce_U0_ap_idle and (count_blocks_channel_empty_n xor ap_const_logic_1) and (reduced_blocks_buf_data_t_empty_n xor ap_const_logic_1) and (input_blocks_buf_data_t_empty_n xor ap_const_logic_1) and count_U0_ap_idle);
    ap_ready <= split_U0_ap_ready;
    count_U0_ap_continue <= count_blocks_channel_full_n;
    count_U0_ap_start <= start_for_count_U0_empty_n;
    reduce_U0_ap_continue <= ap_const_logic_1;
    reduce_U0_ap_start <= count_blocks_channel_empty_n;
    split_U0_ap_continue <= ap_const_logic_1;
    split_U0_ap_start <= ap_start;
    start_for_count_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_threshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    threshold_U0_ap_continue <= ap_continue;
    threshold_U0_ap_start <= start_for_threshold_U0_empty_n;
end behav;
