-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity make_go_fast is
port (
    in_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of make_go_fast is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "make_go_fast_make_go_fast,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=158,HLS_SYN_LUT=610,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal read_in_U0_ap_start : STD_LOGIC;
    signal read_in_U0_ap_done : STD_LOGIC;
    signal read_in_U0_ap_continue : STD_LOGIC;
    signal read_in_U0_ap_idle : STD_LOGIC;
    signal read_in_U0_ap_ready : STD_LOGIC;
    signal read_in_U0_split_in_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_in_U0_split_in_write : STD_LOGIC;
    signal read_in_U0_in_r_TREADY : STD_LOGIC;
    signal KPN_U0_split_out_0_read : STD_LOGIC;
    signal KPN_U0_merge_in_0_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_0_write : STD_LOGIC;
    signal KPN_U0_split_out_1_read : STD_LOGIC;
    signal KPN_U0_merge_in_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_1_write : STD_LOGIC;
    signal KPN_U0_split_out_2_read : STD_LOGIC;
    signal KPN_U0_merge_in_2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_2_write : STD_LOGIC;
    signal KPN_U0_split_out_3_read : STD_LOGIC;
    signal KPN_U0_merge_in_3_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_3_write : STD_LOGIC;
    signal KPN_U0_split_out_4_read : STD_LOGIC;
    signal KPN_U0_merge_in_4_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_4_write : STD_LOGIC;
    signal KPN_U0_split_out_5_read : STD_LOGIC;
    signal KPN_U0_merge_in_5_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_5_write : STD_LOGIC;
    signal KPN_U0_split_out_6_read : STD_LOGIC;
    signal KPN_U0_merge_in_6_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_6_write : STD_LOGIC;
    signal KPN_U0_split_out_7_read : STD_LOGIC;
    signal KPN_U0_merge_in_7_din : STD_LOGIC_VECTOR (7 downto 0);
    signal KPN_U0_merge_in_7_write : STD_LOGIC;
    signal KPN_U0_ap_ready : STD_LOGIC;
    signal write_out_U0_ap_start : STD_LOGIC;
    signal write_out_U0_ap_done : STD_LOGIC;
    signal write_out_U0_ap_continue : STD_LOGIC;
    signal write_out_U0_ap_idle : STD_LOGIC;
    signal write_out_U0_ap_ready : STD_LOGIC;
    signal write_out_U0_merge_out_read : STD_LOGIC;
    signal write_out_U0_out_r_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal write_out_U0_out_r_TVALID : STD_LOGIC;
    signal write_out_U0_out_r_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal write_out_U0_out_r_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal write_out_U0_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal split_in_full_n : STD_LOGIC;
    signal split_out_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_empty_n : STD_LOGIC;
    signal split_out_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_1_empty_n : STD_LOGIC;
    signal split_out_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_2_empty_n : STD_LOGIC;
    signal split_out_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_3_empty_n : STD_LOGIC;
    signal split_out_4_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_4_empty_n : STD_LOGIC;
    signal split_out_5_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_5_empty_n : STD_LOGIC;
    signal split_out_6_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_6_empty_n : STD_LOGIC;
    signal split_out_7_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split_out_7_empty_n : STD_LOGIC;
    signal merge_in_full_n : STD_LOGIC;
    signal merge_in_1_full_n : STD_LOGIC;
    signal merge_in_2_full_n : STD_LOGIC;
    signal merge_in_3_full_n : STD_LOGIC;
    signal merge_in_4_full_n : STD_LOGIC;
    signal merge_in_5_full_n : STD_LOGIC;
    signal merge_in_6_full_n : STD_LOGIC;
    signal merge_in_7_full_n : STD_LOGIC;
    signal merge_out_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal merge_out_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_read_in_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_in_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_write_out_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_write_out_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component make_go_fast_read_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TVALID : IN STD_LOGIC;
        split_in_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        split_in_full_n : IN STD_LOGIC;
        split_in_write : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_go_fast_KPN IS
    port (
        split_out_0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_0_empty_n : IN STD_LOGIC;
        split_out_0_read : OUT STD_LOGIC;
        merge_in_0_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_0_full_n : IN STD_LOGIC;
        merge_in_0_write : OUT STD_LOGIC;
        split_out_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_1_empty_n : IN STD_LOGIC;
        split_out_1_read : OUT STD_LOGIC;
        merge_in_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_1_full_n : IN STD_LOGIC;
        merge_in_1_write : OUT STD_LOGIC;
        split_out_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_2_empty_n : IN STD_LOGIC;
        split_out_2_read : OUT STD_LOGIC;
        merge_in_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_2_full_n : IN STD_LOGIC;
        merge_in_2_write : OUT STD_LOGIC;
        split_out_3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_3_empty_n : IN STD_LOGIC;
        split_out_3_read : OUT STD_LOGIC;
        merge_in_3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_3_full_n : IN STD_LOGIC;
        merge_in_3_write : OUT STD_LOGIC;
        split_out_4_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_4_empty_n : IN STD_LOGIC;
        split_out_4_read : OUT STD_LOGIC;
        merge_in_4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_4_full_n : IN STD_LOGIC;
        merge_in_4_write : OUT STD_LOGIC;
        split_out_5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_5_empty_n : IN STD_LOGIC;
        split_out_5_read : OUT STD_LOGIC;
        merge_in_5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_5_full_n : IN STD_LOGIC;
        merge_in_5_write : OUT STD_LOGIC;
        split_out_6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_6_empty_n : IN STD_LOGIC;
        split_out_6_read : OUT STD_LOGIC;
        merge_in_6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_6_full_n : IN STD_LOGIC;
        merge_in_6_write : OUT STD_LOGIC;
        split_out_7_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        split_out_7_empty_n : IN STD_LOGIC;
        split_out_7_read : OUT STD_LOGIC;
        merge_in_7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        merge_in_7_full_n : IN STD_LOGIC;
        merge_in_7_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component make_go_fast_write_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        merge_out_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        merge_out_empty_n : IN STD_LOGIC;
        merge_out_read : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    read_in_U0 : component make_go_fast_read_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_in_U0_ap_start,
        ap_done => read_in_U0_ap_done,
        ap_continue => read_in_U0_ap_continue,
        ap_idle => read_in_U0_ap_idle,
        ap_ready => read_in_U0_ap_ready,
        in_r_TVALID => in_r_TVALID,
        split_in_din => read_in_U0_split_in_din,
        split_in_full_n => split_in_full_n,
        split_in_write => read_in_U0_split_in_write,
        in_r_TDATA => in_r_TDATA,
        in_r_TREADY => read_in_U0_in_r_TREADY,
        in_r_TKEEP => in_r_TKEEP,
        in_r_TSTRB => in_r_TSTRB,
        in_r_TLAST => in_r_TLAST,
        n => n);

    KPN_U0 : component make_go_fast_KPN
    port map (
        split_out_0_dout => split_out_dout,
        split_out_0_empty_n => split_out_empty_n,
        split_out_0_read => KPN_U0_split_out_0_read,
        merge_in_0_din => KPN_U0_merge_in_0_din,
        merge_in_0_full_n => merge_in_full_n,
        merge_in_0_write => KPN_U0_merge_in_0_write,
        split_out_1_dout => split_out_1_dout,
        split_out_1_empty_n => split_out_1_empty_n,
        split_out_1_read => KPN_U0_split_out_1_read,
        merge_in_1_din => KPN_U0_merge_in_1_din,
        merge_in_1_full_n => merge_in_1_full_n,
        merge_in_1_write => KPN_U0_merge_in_1_write,
        split_out_2_dout => split_out_2_dout,
        split_out_2_empty_n => split_out_2_empty_n,
        split_out_2_read => KPN_U0_split_out_2_read,
        merge_in_2_din => KPN_U0_merge_in_2_din,
        merge_in_2_full_n => merge_in_2_full_n,
        merge_in_2_write => KPN_U0_merge_in_2_write,
        split_out_3_dout => split_out_3_dout,
        split_out_3_empty_n => split_out_3_empty_n,
        split_out_3_read => KPN_U0_split_out_3_read,
        merge_in_3_din => KPN_U0_merge_in_3_din,
        merge_in_3_full_n => merge_in_3_full_n,
        merge_in_3_write => KPN_U0_merge_in_3_write,
        split_out_4_dout => split_out_4_dout,
        split_out_4_empty_n => split_out_4_empty_n,
        split_out_4_read => KPN_U0_split_out_4_read,
        merge_in_4_din => KPN_U0_merge_in_4_din,
        merge_in_4_full_n => merge_in_4_full_n,
        merge_in_4_write => KPN_U0_merge_in_4_write,
        split_out_5_dout => split_out_5_dout,
        split_out_5_empty_n => split_out_5_empty_n,
        split_out_5_read => KPN_U0_split_out_5_read,
        merge_in_5_din => KPN_U0_merge_in_5_din,
        merge_in_5_full_n => merge_in_5_full_n,
        merge_in_5_write => KPN_U0_merge_in_5_write,
        split_out_6_dout => split_out_6_dout,
        split_out_6_empty_n => split_out_6_empty_n,
        split_out_6_read => KPN_U0_split_out_6_read,
        merge_in_6_din => KPN_U0_merge_in_6_din,
        merge_in_6_full_n => merge_in_6_full_n,
        merge_in_6_write => KPN_U0_merge_in_6_write,
        split_out_7_dout => split_out_7_dout,
        split_out_7_empty_n => split_out_7_empty_n,
        split_out_7_read => KPN_U0_split_out_7_read,
        merge_in_7_din => KPN_U0_merge_in_7_din,
        merge_in_7_full_n => merge_in_7_full_n,
        merge_in_7_write => KPN_U0_merge_in_7_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_ready => KPN_U0_ap_ready);

    write_out_U0 : component make_go_fast_write_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_out_U0_ap_start,
        ap_done => write_out_U0_ap_done,
        ap_continue => write_out_U0_ap_continue,
        ap_idle => write_out_U0_ap_idle,
        ap_ready => write_out_U0_ap_ready,
        merge_out_dout => merge_out_dout,
        merge_out_empty_n => merge_out_empty_n,
        merge_out_read => write_out_U0_merge_out_read,
        out_r_TREADY => out_r_TREADY,
        n => n,
        out_r_TDATA => write_out_U0_out_r_TDATA,
        out_r_TVALID => write_out_U0_out_r_TVALID,
        out_r_TKEEP => write_out_U0_out_r_TKEEP,
        out_r_TSTRB => write_out_U0_out_r_TSTRB,
        out_r_TLAST => write_out_U0_out_r_TLAST);

    split_U : component make_go_fast_split_1I8O_w8_d0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_in0_din => read_in_U0_split_in_din,
        if_in0_full_n => split_in_full_n,
        if_in0_write => read_in_U0_split_in_write,
        if_out0_dout => split_out_dout,
        if_out0_empty_n => split_out_empty_n,
        if_out0_read => KPN_U0_split_out_0_read,
        if_out1_dout => split_out_1_dout,
        if_out1_empty_n => split_out_1_empty_n,
        if_out1_read => KPN_U0_split_out_1_read,
        if_out2_dout => split_out_2_dout,
        if_out2_empty_n => split_out_2_empty_n,
        if_out2_read => KPN_U0_split_out_2_read,
        if_out3_dout => split_out_3_dout,
        if_out3_empty_n => split_out_3_empty_n,
        if_out3_read => KPN_U0_split_out_3_read,
        if_out4_dout => split_out_4_dout,
        if_out4_empty_n => split_out_4_empty_n,
        if_out4_read => KPN_U0_split_out_4_read,
        if_out5_dout => split_out_5_dout,
        if_out5_empty_n => split_out_5_empty_n,
        if_out5_read => KPN_U0_split_out_5_read,
        if_out6_dout => split_out_6_dout,
        if_out6_empty_n => split_out_6_empty_n,
        if_out6_read => KPN_U0_split_out_6_read,
        if_out7_dout => split_out_7_dout,
        if_out7_empty_n => split_out_7_empty_n,
        if_out7_read => KPN_U0_split_out_7_read);

    merge_U : component make_go_fast_merge_8I1O_w8_d0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_in0_din => KPN_U0_merge_in_0_din,
        if_in0_full_n => merge_in_full_n,
        if_in0_write => KPN_U0_merge_in_0_write,
        if_in1_din => KPN_U0_merge_in_1_din,
        if_in1_full_n => merge_in_1_full_n,
        if_in1_write => KPN_U0_merge_in_1_write,
        if_in2_din => KPN_U0_merge_in_2_din,
        if_in2_full_n => merge_in_2_full_n,
        if_in2_write => KPN_U0_merge_in_2_write,
        if_in3_din => KPN_U0_merge_in_3_din,
        if_in3_full_n => merge_in_3_full_n,
        if_in3_write => KPN_U0_merge_in_3_write,
        if_in4_din => KPN_U0_merge_in_4_din,
        if_in4_full_n => merge_in_4_full_n,
        if_in4_write => KPN_U0_merge_in_4_write,
        if_in5_din => KPN_U0_merge_in_5_din,
        if_in5_full_n => merge_in_5_full_n,
        if_in5_write => KPN_U0_merge_in_5_write,
        if_in6_din => KPN_U0_merge_in_6_din,
        if_in6_full_n => merge_in_6_full_n,
        if_in6_write => KPN_U0_merge_in_6_write,
        if_in7_din => KPN_U0_merge_in_7_din,
        if_in7_full_n => merge_in_7_full_n,
        if_in7_write => KPN_U0_merge_in_7_write,
        if_out0_dout => merge_out_dout,
        if_out0_empty_n => merge_out_empty_n,
        if_out0_read => write_out_U0_merge_out_read);





    ap_sync_reg_read_in_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_in_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_in_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_in_U0_ap_ready <= ap_sync_read_in_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_write_out_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_write_out_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_write_out_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_write_out_U0_ap_ready <= ap_sync_write_out_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= write_out_U0_ap_done;
    ap_idle <= (write_out_U0_ap_idle and read_in_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_read_in_U0_ap_ready <= (read_in_U0_ap_ready or ap_sync_reg_read_in_U0_ap_ready);
    ap_sync_ready <= (ap_sync_write_out_U0_ap_ready and ap_sync_read_in_U0_ap_ready);
    ap_sync_write_out_U0_ap_ready <= (write_out_U0_ap_ready or ap_sync_reg_write_out_U0_ap_ready);
    in_r_TREADY <= read_in_U0_in_r_TREADY;
    out_r_TDATA <= write_out_U0_out_r_TDATA;
    out_r_TKEEP <= write_out_U0_out_r_TKEEP;
    out_r_TLAST <= write_out_U0_out_r_TLAST;
    out_r_TSTRB <= write_out_U0_out_r_TSTRB;
    out_r_TVALID <= write_out_U0_out_r_TVALID;
    read_in_U0_ap_continue <= ap_const_logic_1;
    read_in_U0_ap_start <= ((ap_sync_reg_read_in_U0_ap_ready xor ap_const_logic_1) and ap_start);
    write_out_U0_ap_continue <= ap_const_logic_1;
    write_out_U0_ap_start <= ((ap_sync_reg_write_out_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
