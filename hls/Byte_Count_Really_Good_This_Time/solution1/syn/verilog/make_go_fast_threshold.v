// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module make_go_fast_threshold (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_empty_n,
        in_r_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] in_r_address0;
output   in_r_ce0;
input  [15:0] in_r_q0;
input   in_r_empty_n;
output   in_r_read;
output  [7:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg in_r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_r_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_idle;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_ready;
wire   [7:0] grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_address0;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read;
wire   [7:0] grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out;
wire    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out_ap_vld;
reg    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg;
reg    ap_block_state1_ignore_call4;
wire    ap_CS_fsm_state2;
wire    regslice_both_out_r_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg = 1'b0;
end

make_go_fast_threshold_Pipeline_VITIS_LOOP_16_1 grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start),
    .ap_done(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done),
    .ap_idle(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_idle),
    .ap_ready(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_ready),
    .in_r_address0(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_address0),
    .in_r_ce0(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0),
    .in_r_q0(in_r_q0),
    .in_r_empty_n(in_r_empty_n),
    .in_r_read(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read),
    .over_thresh_out(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out),
    .over_thresh_out_ap_vld(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out_ap_vld)
);

make_go_fast_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (in_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg <= 1'b1;
        end else if ((grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_ready == 1'b1)) begin
            grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (in_r_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_r_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_ce0 = grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        in_r_read = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        in_r_read = grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_r_TREADY_int_regslice == 1'b1))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (in_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (out_r_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (in_r_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call4 = ((ap_start == 1'b0) | (in_r_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0));
end

assign grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start = grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg;

assign in_r_address0 = grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_address0;

assign out_r_TVALID = regslice_both_out_r_U_vld_out;

endmodule //make_go_fast_threshold
