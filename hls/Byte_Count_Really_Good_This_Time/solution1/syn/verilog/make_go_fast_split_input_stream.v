// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module make_go_fast_split_input_stream (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        InStream_TDATA,
        InStream_TVALID,
        InStream_TREADY,
        InStream_TKEEP,
        InStream_TSTRB,
        InStream_TLAST,
        split_buffer_din,
        split_buffer_num_data_valid,
        split_buffer_fifo_cap,
        split_buffer_full_n,
        split_buffer_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] InStream_TDATA;
input   InStream_TVALID;
output   InStream_TREADY;
input  [0:0] InStream_TKEEP;
input  [0:0] InStream_TSTRB;
input  [0:0] InStream_TLAST;
output  [8:0] split_buffer_din;
input  [8:0] split_buffer_num_data_valid;
input  [8:0] split_buffer_fifo_cap;
input   split_buffer_full_n;
output   split_buffer_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg split_buffer_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    InStream_TDATA_blk_n;
reg   [7:0] tmp_data_V_reg_69;
reg   [0:0] tmp_last_V_reg_74;
wire   [8:0] tmp_1_fu_62_p3;
reg   [8:0] tmp_1_reg_80;
wire    ap_CS_fsm_state2;
wire    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start;
wire    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done;
wire    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_idle;
wire    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_ready;
wire   [8:0] grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_din;
wire    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write;
reg    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_InStream_V_data_V_U_apdone_blk;
wire   [7:0] InStream_TDATA_int_regslice;
wire    InStream_TVALID_int_regslice;
reg    InStream_TREADY_int_regslice;
wire    regslice_both_InStream_V_data_V_U_ack_in;
wire    regslice_both_InStream_V_keep_V_U_apdone_blk;
wire   [0:0] InStream_TKEEP_int_regslice;
wire    regslice_both_InStream_V_keep_V_U_vld_out;
wire    regslice_both_InStream_V_keep_V_U_ack_in;
wire    regslice_both_InStream_V_strb_V_U_apdone_blk;
wire   [0:0] InStream_TSTRB_int_regslice;
wire    regslice_both_InStream_V_strb_V_U_vld_out;
wire    regslice_both_InStream_V_strb_V_U_ack_in;
wire    regslice_both_InStream_V_last_V_U_apdone_blk;
wire   [0:0] InStream_TLAST_int_regslice;
wire    regslice_both_InStream_V_last_V_U_vld_out;
wire    regslice_both_InStream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg = 1'b0;
end

make_go_fast_split_input_stream_Pipeline_VITIS_LOOP_16_1 grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start),
    .ap_done(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done),
    .ap_idle(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_idle),
    .ap_ready(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_ready),
    .split_buffer_din(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_din),
    .split_buffer_num_data_valid(9'd0),
    .split_buffer_fifo_cap(9'd0),
    .split_buffer_full_n(split_buffer_full_n),
    .split_buffer_write(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write),
    .tmp_1(tmp_1_reg_80),
    .tmp_last_V(tmp_last_V_reg_74)
);

make_go_fast_regslice_both #(
    .DataWidth( 8 ))
regslice_both_InStream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(InStream_TDATA),
    .vld_in(InStream_TVALID),
    .ack_in(regslice_both_InStream_V_data_V_U_ack_in),
    .data_out(InStream_TDATA_int_regslice),
    .vld_out(InStream_TVALID_int_regslice),
    .ack_out(InStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_InStream_V_data_V_U_apdone_blk)
);

make_go_fast_regslice_both #(
    .DataWidth( 1 ))
regslice_both_InStream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(InStream_TKEEP),
    .vld_in(InStream_TVALID),
    .ack_in(regslice_both_InStream_V_keep_V_U_ack_in),
    .data_out(InStream_TKEEP_int_regslice),
    .vld_out(regslice_both_InStream_V_keep_V_U_vld_out),
    .ack_out(InStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_InStream_V_keep_V_U_apdone_blk)
);

make_go_fast_regslice_both #(
    .DataWidth( 1 ))
regslice_both_InStream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(InStream_TSTRB),
    .vld_in(InStream_TVALID),
    .ack_in(regslice_both_InStream_V_strb_V_U_ack_in),
    .data_out(InStream_TSTRB_int_regslice),
    .vld_out(regslice_both_InStream_V_strb_V_U_vld_out),
    .ack_out(InStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_InStream_V_strb_V_U_apdone_blk)
);

make_go_fast_regslice_both #(
    .DataWidth( 1 ))
regslice_both_InStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(InStream_TLAST),
    .vld_in(InStream_TVALID),
    .ack_in(regslice_both_InStream_V_last_V_U_ack_in),
    .data_out(InStream_TLAST_int_regslice),
    .vld_out(regslice_both_InStream_V_last_V_U_vld_out),
    .ack_out(InStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_InStream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg <= 1'b1;
        end else if ((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_ready == 1'b1)) begin
            grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_80 <= tmp_1_fu_62_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_data_V_reg_69 <= InStream_TDATA_int_regslice;
        tmp_last_V_reg_74 <= InStream_TLAST_int_regslice;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        InStream_TDATA_blk_n = InStream_TVALID_int_regslice;
    end else begin
        InStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == InStream_TVALID_int_regslice) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        InStream_TREADY_int_regslice = 1'b1;
    end else begin
        InStream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (1'b0 == InStream_TVALID_int_regslice) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        split_buffer_write = grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write;
    end else begin
        split_buffer_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (1'b0 == InStream_TVALID_int_regslice) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign InStream_TREADY = regslice_both_InStream_V_data_V_U_ack_in;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == InStream_TVALID_int_regslice) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start = grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg;

assign split_buffer_din = grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_din;

assign start_out = real_start;

assign tmp_1_fu_62_p3 = {{tmp_last_V_reg_74}, {tmp_data_V_reg_69}};

endmodule //make_go_fast_split_input_stream
