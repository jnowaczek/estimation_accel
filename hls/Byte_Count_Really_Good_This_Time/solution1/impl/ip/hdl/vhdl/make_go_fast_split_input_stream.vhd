-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity make_go_fast_split_input_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    InStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    InStream_TVALID : IN STD_LOGIC;
    InStream_TREADY : OUT STD_LOGIC;
    InStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    InStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    InStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    split_buffer_din : OUT STD_LOGIC_VECTOR (8 downto 0);
    split_buffer_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    split_buffer_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    split_buffer_full_n : IN STD_LOGIC;
    split_buffer_write : OUT STD_LOGIC );
end;


architecture behav of make_go_fast_split_input_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal InStream_TDATA_blk_n : STD_LOGIC;
    signal tmp_data_V_reg_69 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_reg_74 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_62_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_80 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start : STD_LOGIC;
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done : STD_LOGIC;
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_idle : STD_LOGIC;
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_ready : STD_LOGIC;
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_din : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write : STD_LOGIC;
    signal grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal regslice_both_InStream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal InStream_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal InStream_TVALID_int_regslice : STD_LOGIC;
    signal InStream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_InStream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_InStream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal InStream_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_InStream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_InStream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_InStream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal InStream_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_InStream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_InStream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_InStream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal InStream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_InStream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_InStream_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component make_go_fast_split_input_stream_Pipeline_VITIS_LOOP_16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        split_buffer_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        split_buffer_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        split_buffer_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        split_buffer_full_n : IN STD_LOGIC;
        split_buffer_write : OUT STD_LOGIC;
        tmp_1 : IN STD_LOGIC_VECTOR (8 downto 0);
        tmp_last_V : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component make_go_fast_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46 : component make_go_fast_split_input_stream_Pipeline_VITIS_LOOP_16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start,
        ap_done => grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done,
        ap_idle => grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_idle,
        ap_ready => grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_ready,
        split_buffer_din => grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_din,
        split_buffer_num_data_valid => ap_const_lv9_0,
        split_buffer_fifo_cap => ap_const_lv9_0,
        split_buffer_full_n => split_buffer_full_n,
        split_buffer_write => grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write,
        tmp_1 => tmp_1_reg_80,
        tmp_last_V => tmp_last_V_reg_74);

    regslice_both_InStream_V_data_V_U : component make_go_fast_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => InStream_TDATA,
        vld_in => InStream_TVALID,
        ack_in => regslice_both_InStream_V_data_V_U_ack_in,
        data_out => InStream_TDATA_int_regslice,
        vld_out => InStream_TVALID_int_regslice,
        ack_out => InStream_TREADY_int_regslice,
        apdone_blk => regslice_both_InStream_V_data_V_U_apdone_blk);

    regslice_both_InStream_V_keep_V_U : component make_go_fast_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => InStream_TKEEP,
        vld_in => InStream_TVALID,
        ack_in => regslice_both_InStream_V_keep_V_U_ack_in,
        data_out => InStream_TKEEP_int_regslice,
        vld_out => regslice_both_InStream_V_keep_V_U_vld_out,
        ack_out => InStream_TREADY_int_regslice,
        apdone_blk => regslice_both_InStream_V_keep_V_U_apdone_blk);

    regslice_both_InStream_V_strb_V_U : component make_go_fast_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => InStream_TSTRB,
        vld_in => InStream_TVALID,
        ack_in => regslice_both_InStream_V_strb_V_U_ack_in,
        data_out => InStream_TSTRB_int_regslice,
        vld_out => regslice_both_InStream_V_strb_V_U_vld_out,
        ack_out => InStream_TREADY_int_regslice,
        apdone_blk => regslice_both_InStream_V_strb_V_U_apdone_blk);

    regslice_both_InStream_V_last_V_U : component make_go_fast_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => InStream_TLAST,
        vld_in => InStream_TVALID,
        ack_in => regslice_both_InStream_V_last_V_U_ack_in,
        data_out => InStream_TLAST_int_regslice,
        vld_out => regslice_both_InStream_V_last_V_U_vld_out,
        ack_out => InStream_TREADY_int_regslice,
        apdone_blk => regslice_both_InStream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_ready = ap_const_logic_1)) then 
                    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_1_reg_80 <= tmp_1_fu_62_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_data_V_reg_69 <= InStream_TDATA_int_regslice;
                tmp_last_V_reg_74 <= InStream_TLAST_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done, ap_CS_fsm_state3, InStream_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = InStream_TVALID_int_regslice) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    InStream_TDATA_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, InStream_TVALID_int_regslice)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            InStream_TDATA_blk_n <= InStream_TVALID_int_regslice;
        else 
            InStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    InStream_TREADY <= regslice_both_InStream_V_data_V_U_ack_in;

    InStream_TREADY_int_regslice_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, InStream_TVALID_int_regslice)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = InStream_TVALID_int_regslice) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            InStream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            InStream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, InStream_TVALID_int_regslice)
    begin
        if (((real_start = ap_const_logic_0) or (ap_const_logic_0 = InStream_TVALID_int_regslice) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done)
    begin
        if ((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, InStream_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_const_logic_0 = InStream_TVALID_int_regslice) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start <= grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    split_buffer_din <= grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_din;

    split_buffer_write_assign_proc : process(grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            split_buffer_write <= grp_split_input_stream_Pipeline_VITIS_LOOP_16_1_fu_46_split_buffer_write;
        else 
            split_buffer_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_62_p3 <= (tmp_last_V_reg_74 & tmp_data_V_reg_69);
end behav;
