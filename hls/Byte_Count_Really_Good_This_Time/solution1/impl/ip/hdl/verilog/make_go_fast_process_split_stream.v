// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module make_go_fast_process_split_stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        split_buffer_dout,
        split_buffer_num_data_valid,
        split_buffer_fifo_cap,
        split_buffer_empty_n,
        split_buffer_read,
        OutStream_TDATA,
        OutStream_TVALID,
        OutStream_TREADY,
        OutStream_TKEEP,
        OutStream_TSTRB,
        OutStream_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] split_buffer_dout;
input  [8:0] split_buffer_num_data_valid;
input  [8:0] split_buffer_fifo_cap;
input   split_buffer_empty_n;
output   split_buffer_read;
output  [7:0] OutStream_TDATA;
output   OutStream_TVALID;
input   OutStream_TREADY;
output  [0:0] OutStream_TKEEP;
output  [0:0] OutStream_TSTRB;
output  [0:0] OutStream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg split_buffer_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    split_buffer_blk_n;
reg    OutStream_TDATA_blk_n;
wire   [0:0] tmp_last_V_fu_68_p3;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_last_V_reg_81;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire    regslice_both_OutStream_V_data_V_U_apdone_blk;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire   [7:0] OutStream_TDATA_int_regslice;
reg    OutStream_TVALID_int_regslice;
wire    OutStream_TREADY_int_regslice;
wire    regslice_both_OutStream_V_data_V_U_vld_out;
wire    regslice_both_OutStream_V_keep_V_U_apdone_blk;
wire    regslice_both_OutStream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OutStream_V_keep_V_U_vld_out;
wire    regslice_both_OutStream_V_strb_V_U_apdone_blk;
wire    regslice_both_OutStream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OutStream_V_strb_V_U_vld_out;
wire    regslice_both_OutStream_V_last_V_U_apdone_blk;
wire    regslice_both_OutStream_V_last_V_U_ack_in_dummy;
wire    regslice_both_OutStream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

make_go_fast_regslice_both #(
    .DataWidth( 8 ))
regslice_both_OutStream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(OutStream_TDATA_int_regslice),
    .vld_in(OutStream_TVALID_int_regslice),
    .ack_in(OutStream_TREADY_int_regslice),
    .data_out(OutStream_TDATA),
    .vld_out(regslice_both_OutStream_V_data_V_U_vld_out),
    .ack_out(OutStream_TREADY),
    .apdone_blk(regslice_both_OutStream_V_data_V_U_apdone_blk)
);

make_go_fast_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OutStream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd1),
    .vld_in(OutStream_TVALID_int_regslice),
    .ack_in(regslice_both_OutStream_V_keep_V_U_ack_in_dummy),
    .data_out(OutStream_TKEEP),
    .vld_out(regslice_both_OutStream_V_keep_V_U_vld_out),
    .ack_out(OutStream_TREADY),
    .apdone_blk(regslice_both_OutStream_V_keep_V_U_apdone_blk)
);

make_go_fast_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OutStream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(OutStream_TVALID_int_regslice),
    .ack_in(regslice_both_OutStream_V_strb_V_U_ack_in_dummy),
    .data_out(OutStream_TSTRB),
    .vld_out(regslice_both_OutStream_V_strb_V_U_vld_out),
    .ack_out(OutStream_TREADY),
    .apdone_blk(regslice_both_OutStream_V_strb_V_U_apdone_blk)
);

make_go_fast_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OutStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(OutStream_TVALID_int_regslice),
    .ack_in(regslice_both_OutStream_V_last_V_U_ack_in_dummy),
    .data_out(OutStream_TLAST),
    .vld_out(regslice_both_OutStream_V_last_V_U_vld_out),
    .ack_out(OutStream_TREADY),
    .apdone_blk(regslice_both_OutStream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_OutStream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_last_V_reg_81 <= split_buffer_dout[32'd8];
    end
end

always @ (*) begin
    if ((((tmp_last_V_reg_81 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_last_V_fu_68_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        OutStream_TDATA_blk_n = OutStream_TREADY_int_regslice;
    end else begin
        OutStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (split_buffer_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1) | ((tmp_last_V_fu_68_p3 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (tmp_last_V_fu_68_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OutStream_TVALID_int_regslice = 1'b1;
    end else begin
        OutStream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (split_buffer_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1) | ((tmp_last_V_fu_68_p3 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_OutStream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_OutStream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_OutStream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        split_buffer_blk_n = split_buffer_empty_n;
    end else begin
        split_buffer_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (split_buffer_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1) | ((tmp_last_V_fu_68_p3 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state1))) begin
        split_buffer_read = 1'b1;
    end else begin
        split_buffer_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (split_buffer_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1) | ((tmp_last_V_fu_68_p3 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_OutStream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutStream_TDATA_int_regslice = split_buffer_dout[7:0];

assign OutStream_TVALID = regslice_both_OutStream_V_data_V_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (split_buffer_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_last_V_fu_68_p3 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state1_io = ((tmp_last_V_fu_68_p3 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_OutStream_V_data_V_U_apdone_blk == 1'b1) | ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state2_io = ((tmp_last_V_reg_81 == 1'd1) & (1'b0 == OutStream_TREADY_int_regslice));
end

assign tmp_last_V_fu_68_p3 = split_buffer_dout[32'd8];

endmodule //make_go_fast_process_split_stream
