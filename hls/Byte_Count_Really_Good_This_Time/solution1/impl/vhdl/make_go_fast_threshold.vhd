-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity make_go_fast_threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of make_go_fast_threshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_idle : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_ready : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0 : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out_ap_vld : STD_LOGIC;
    signal grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call4 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_out_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component make_go_fast_threshold_Pipeline_VITIS_LOOP_16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        over_thresh_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        over_thresh_out_ap_vld : OUT STD_LOGIC );
    end component;


    component make_go_fast_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61 : component make_go_fast_threshold_Pipeline_VITIS_LOOP_16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start,
        ap_done => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done,
        ap_idle => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_idle,
        ap_ready => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_ready,
        in_r_address0 => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_address0,
        in_r_ce0 => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0,
        in_r_q0 => in_r_q0,
        in_r_empty_n => in_r_empty_n,
        in_r_read => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read,
        over_thresh_out => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out,
        over_thresh_out_ap_vld => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out_ap_vld);

    regslice_both_out_r_U : component make_go_fast_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_over_thresh_out,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (in_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_ready = ap_const_logic_1)) then 
                    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_r_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done, ap_CS_fsm_state2, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (in_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_r_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, in_r_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (in_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done)
    begin
        if ((grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(out_r_TREADY_int_regslice)
    begin
        if ((out_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if (((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_r_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (in_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call4_assign_proc : process(ap_start, ap_done_reg, in_r_empty_n)
    begin
                ap_block_state1_ignore_call4 <= ((ap_start = ap_const_logic_0) or (in_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state4 <= ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start <= grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_ap_start_reg;
    in_r_address0 <= grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_address0;

    in_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_ce0_assign_proc : process(grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_ce0 <= grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_ce0;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_read_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read, ap_CS_fsm_state2, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_read <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_r_read <= grp_threshold_Pipeline_VITIS_LOOP_16_1_fu_61_in_r_read;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_r_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state3, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_r_TREADY_int_regslice = ap_const_logic_1))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
