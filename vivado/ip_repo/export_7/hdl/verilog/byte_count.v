// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="byte_count_byte_count,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=258,HLS_SYN_TPT=130,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1294,HLS_SYN_LUT=9625,HLS_VERSION=2022_1}" *)

module byte_count (
        ap_clk,
        ap_rst,
        input_r,
        output_r,
        ap_start,
        output_r_ap_vld,
        ap_done,
        ap_ready,
        ap_idle
);


input   ap_clk;
input   ap_rst;
input  [7:0] input_r;
output  [31:0] output_r;
input   ap_start;
output   output_r_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire   [10:0] appearances_i_q0;
wire   [10:0] appearances_i_q1;
wire   [10:0] appearances_t_q0;
wire   [10:0] appearances_t_q1;
wire    count_appearances_U0_ap_start;
wire    count_appearances_U0_ap_done;
wire    count_appearances_U0_ap_continue;
wire    count_appearances_U0_ap_idle;
wire    count_appearances_U0_ap_ready;
wire   [7:0] count_appearances_U0_appearances_address0;
wire    count_appearances_U0_appearances_ce0;
wire    count_appearances_U0_appearances_we0;
wire   [10:0] count_appearances_U0_appearances_d0;
wire   [7:0] count_appearances_U0_appearances_address1;
wire    count_appearances_U0_appearances_ce1;
wire    count_appearances_U0_appearances_we1;
wire   [10:0] count_appearances_U0_appearances_d1;
wire    count_threshold_U0_ap_start;
wire    count_threshold_U0_ap_done;
wire    count_threshold_U0_ap_continue;
wire    count_threshold_U0_ap_idle;
wire    count_threshold_U0_ap_ready;
wire   [7:0] count_threshold_U0_appearances_address0;
wire    count_threshold_U0_appearances_ce0;
wire   [7:0] count_threshold_U0_appearances_address1;
wire    count_threshold_U0_appearances_ce1;
wire   [31:0] count_threshold_U0_output_r;
wire    count_threshold_U0_output_r_ap_vld;
wire    appearances_i_full_n;
wire    appearances_t_empty_n;

byte_count_appearances_RAM_AUTO_1R1W #(
    .DataWidth( 11 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
appearances_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(count_appearances_U0_appearances_address0),
    .i_ce0(count_appearances_U0_appearances_ce0),
    .i_we0(count_appearances_U0_appearances_we0),
    .i_d0(count_appearances_U0_appearances_d0),
    .i_q0(appearances_i_q0),
    .i_address1(count_appearances_U0_appearances_address1),
    .i_ce1(count_appearances_U0_appearances_ce1),
    .i_we1(count_appearances_U0_appearances_we1),
    .i_d1(count_appearances_U0_appearances_d1),
    .i_q1(appearances_i_q1),
    .t_address0(count_threshold_U0_appearances_address0),
    .t_ce0(count_threshold_U0_appearances_ce0),
    .t_we0(1'b0),
    .t_d0(11'd0),
    .t_q0(appearances_t_q0),
    .t_address1(count_threshold_U0_appearances_address1),
    .t_ce1(count_threshold_U0_appearances_ce1),
    .t_we1(1'b0),
    .t_d1(11'd0),
    .t_q1(appearances_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(appearances_i_full_n),
    .i_write(count_appearances_U0_ap_done),
    .t_empty_n(appearances_t_empty_n),
    .t_read(count_threshold_U0_ap_ready)
);

byte_count_count_appearances count_appearances_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(count_appearances_U0_ap_start),
    .ap_done(count_appearances_U0_ap_done),
    .ap_continue(count_appearances_U0_ap_continue),
    .ap_idle(count_appearances_U0_ap_idle),
    .ap_ready(count_appearances_U0_ap_ready),
    .input_r(input_r),
    .appearances_address0(count_appearances_U0_appearances_address0),
    .appearances_ce0(count_appearances_U0_appearances_ce0),
    .appearances_we0(count_appearances_U0_appearances_we0),
    .appearances_d0(count_appearances_U0_appearances_d0),
    .appearances_address1(count_appearances_U0_appearances_address1),
    .appearances_ce1(count_appearances_U0_appearances_ce1),
    .appearances_we1(count_appearances_U0_appearances_we1),
    .appearances_d1(count_appearances_U0_appearances_d1)
);

byte_count_count_threshold count_threshold_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(count_threshold_U0_ap_start),
    .ap_done(count_threshold_U0_ap_done),
    .ap_continue(count_threshold_U0_ap_continue),
    .ap_idle(count_threshold_U0_ap_idle),
    .ap_ready(count_threshold_U0_ap_ready),
    .appearances_address0(count_threshold_U0_appearances_address0),
    .appearances_ce0(count_threshold_U0_appearances_ce0),
    .appearances_q0(appearances_t_q0),
    .appearances_address1(count_threshold_U0_appearances_address1),
    .appearances_ce1(count_threshold_U0_appearances_ce1),
    .appearances_q1(appearances_t_q1),
    .output_r(count_threshold_U0_output_r),
    .output_r_ap_vld(count_threshold_U0_output_r_ap_vld)
);

assign ap_done = count_threshold_U0_ap_done;

assign ap_idle = ((appearances_t_empty_n ^ 1'b1) & count_threshold_U0_ap_idle & count_appearances_U0_ap_idle);

assign ap_ready = count_appearances_U0_ap_ready;

assign count_appearances_U0_ap_continue = appearances_i_full_n;

assign count_appearances_U0_ap_start = ap_start;

assign count_threshold_U0_ap_continue = 1'b1;

assign count_threshold_U0_ap_start = appearances_t_empty_n;

assign output_r = count_threshold_U0_output_r;

assign output_r_ap_vld = count_threshold_U0_output_r_ap_vld;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "byte_count_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //byte_count

