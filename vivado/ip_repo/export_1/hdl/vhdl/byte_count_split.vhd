-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity byte_count_split is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output0_ce0 : OUT STD_LOGIC;
    output0_we0 : OUT STD_LOGIC;
    output0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output1_ce0 : OUT STD_LOGIC;
    output1_we0 : OUT STD_LOGIC;
    output1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output2_ce0 : OUT STD_LOGIC;
    output2_we0 : OUT STD_LOGIC;
    output2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output3_ce0 : OUT STD_LOGIC;
    output3_we0 : OUT STD_LOGIC;
    output3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of byte_count_split is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal trunc_ln_fu_74_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln_reg_95 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_idle : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_ready : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_ce0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_we0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_ce0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_we0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_ce0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_we0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_ce0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_we0 : STD_LOGIC;
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sext_ln43_fu_84_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component byte_count_split_Pipeline_VITIS_LOOP_43_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln43 : IN STD_LOGIC_VECTOR (57 downto 0);
        output0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output0_ce0 : OUT STD_LOGIC;
        output0_we0 : OUT STD_LOGIC;
        output0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output1_ce0 : OUT STD_LOGIC;
        output1_we0 : OUT STD_LOGIC;
        output1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output2_ce0 : OUT STD_LOGIC;
        output2_we0 : OUT STD_LOGIC;
        output2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output3_ce0 : OUT STD_LOGIC;
        output3_we0 : OUT STD_LOGIC;
        output3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_split_Pipeline_VITIS_LOOP_43_1_fu_59 : component byte_count_split_Pipeline_VITIS_LOOP_43_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start,
        ap_done => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done,
        ap_idle => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_idle,
        ap_ready => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_ready,
        m_axi_gmem_AWVALID => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln43 => trunc_ln_reg_95,
        output0_address0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_address0,
        output0_ce0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_ce0,
        output0_we0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_we0,
        output0_d0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_d0,
        output1_address0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_address0,
        output1_ce0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_ce0,
        output1_we0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_we0,
        output1_d0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_d0,
        output2_address0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_address0,
        output2_ce0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_ce0,
        output2_we0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_we0,
        output2_d0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_d0,
        output3_address0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_address0,
        output3_ce0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_ce0,
        output3_we0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_we0,
        output3_d0 => grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln_reg_95 <= input_r(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_ARREADY, grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, m_axi_gmem_ARREADY)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done)
    begin
        if ((grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_ap_start_reg;

    m_axi_gmem_ARADDR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY, grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARADDR, ap_CS_fsm_state8, ap_CS_fsm_state9, sext_ln43_fu_84_p1)
    begin
        if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_ARADDR <= sext_ln43_fu_84_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARADDR <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARADDR;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_ARBURST_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARBURST, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARBURST <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARBURST;
        else 
            m_axi_gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_ARCACHE_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARCACHE, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARCACHE <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARCACHE;
        else 
            m_axi_gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARID_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARID, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARID <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARID;
        else 
            m_axi_gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_ARLEN_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY, grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLEN, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARLEN <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLEN;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_ARLOCK_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLOCK, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARLOCK <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARLOCK;
        else 
            m_axi_gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_ARPROT_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARPROT, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARPROT <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARPROT;
        else 
            m_axi_gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_ARQOS_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARQOS, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARQOS <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARQOS;
        else 
            m_axi_gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARREGION_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARREGION, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARREGION <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARREGION;
        else 
            m_axi_gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARSIZE_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARSIZE, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARSIZE <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARSIZE;
        else 
            m_axi_gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_ARUSER_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARUSER, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARUSER <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARUSER;
        else 
            m_axi_gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_ARVALID_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY, grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARVALID, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARVALID <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_RREADY, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_RREADY <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    output0_address0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_address0;
    output0_ce0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_ce0;
    output0_d0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_d0;
    output0_we0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output0_we0;
    output1_address0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_address0;
    output1_ce0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_ce0;
    output1_d0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_d0;
    output1_we0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output1_we0;
    output2_address0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_address0;
    output2_ce0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_ce0;
    output2_d0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_d0;
    output2_we0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output2_we0;
    output3_address0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_address0;
    output3_ce0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_ce0;
    output3_d0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_d0;
    output3_we0 <= grp_split_Pipeline_VITIS_LOOP_43_1_fu_59_output3_we0;
        sext_ln43_fu_84_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_74_p4),64));

    trunc_ln_fu_74_p4 <= input_r(63 downto 6);
end behav;
