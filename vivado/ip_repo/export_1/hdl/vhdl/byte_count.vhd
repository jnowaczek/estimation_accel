-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity byte_count is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of byte_count is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "byte_count_byte_count,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=6.800000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.964000,HLS_SYN_LAT=658,HLS_SYN_TPT=391,HLS_SYN_MEM=82,HLS_SYN_DSP=0,HLS_SYN_FF=6143,HLS_SYN_LUT=27339,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal input0_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input0_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input2_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input2_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input3_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input3_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal appearances0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances0_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances0_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances2_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances2_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances3_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appearances3_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal combined_appearances_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal combined_appearances_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal combined_appearances_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal combined_appearances_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_ap_start : STD_LOGIC;
    signal split_U0_ap_done : STD_LOGIC;
    signal split_U0_ap_continue : STD_LOGIC;
    signal split_U0_ap_idle : STD_LOGIC;
    signal split_U0_ap_ready : STD_LOGIC;
    signal split_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal split_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal split_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal split_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal split_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal split_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal split_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal split_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal split_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal split_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal split_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal split_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal split_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal split_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal split_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal split_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal split_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal split_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal split_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal split_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal split_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal split_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal split_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal split_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal split_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal split_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal split_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal split_U0_output0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output0_ce0 : STD_LOGIC;
    signal split_U0_output0_we0 : STD_LOGIC;
    signal split_U0_output0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output1_ce0 : STD_LOGIC;
    signal split_U0_output1_we0 : STD_LOGIC;
    signal split_U0_output1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output2_ce0 : STD_LOGIC;
    signal split_U0_output2_we0 : STD_LOGIC;
    signal split_U0_output2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal split_U0_output3_ce0 : STD_LOGIC;
    signal split_U0_output3_we0 : STD_LOGIC;
    signal split_U0_output3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_input3 : STD_LOGIC;
    signal split_U0_output3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input3 : STD_LOGIC;
    signal ap_channel_done_input2 : STD_LOGIC;
    signal split_U0_output2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input2 : STD_LOGIC;
    signal ap_channel_done_input1 : STD_LOGIC;
    signal split_U0_output1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input1 : STD_LOGIC;
    signal ap_channel_done_input0 : STD_LOGIC;
    signal split_U0_output0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input0 : STD_LOGIC;
    signal count_appearances_1_U0_ap_start : STD_LOGIC;
    signal count_appearances_1_U0_ap_done : STD_LOGIC;
    signal count_appearances_1_U0_ap_continue : STD_LOGIC;
    signal count_appearances_1_U0_ap_idle : STD_LOGIC;
    signal count_appearances_1_U0_ap_ready : STD_LOGIC;
    signal count_appearances_1_U0_input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_1_U0_input_r_ce0 : STD_LOGIC;
    signal count_appearances_1_U0_appearances_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_1_U0_appearances_ce0 : STD_LOGIC;
    signal count_appearances_1_U0_appearances_we0 : STD_LOGIC;
    signal count_appearances_1_U0_appearances_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_1_U0_appearances_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_1_U0_appearances_ce1 : STD_LOGIC;
    signal count_appearances_1_U0_appearances_we1 : STD_LOGIC;
    signal count_appearances_1_U0_appearances_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_2_U0_ap_start : STD_LOGIC;
    signal count_appearances_2_U0_ap_done : STD_LOGIC;
    signal count_appearances_2_U0_ap_continue : STD_LOGIC;
    signal count_appearances_2_U0_ap_idle : STD_LOGIC;
    signal count_appearances_2_U0_ap_ready : STD_LOGIC;
    signal count_appearances_2_U0_input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_2_U0_input_r_ce0 : STD_LOGIC;
    signal count_appearances_2_U0_appearances_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_2_U0_appearances_ce0 : STD_LOGIC;
    signal count_appearances_2_U0_appearances_we0 : STD_LOGIC;
    signal count_appearances_2_U0_appearances_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_2_U0_appearances_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_2_U0_appearances_ce1 : STD_LOGIC;
    signal count_appearances_2_U0_appearances_we1 : STD_LOGIC;
    signal count_appearances_2_U0_appearances_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_3_U0_ap_start : STD_LOGIC;
    signal count_appearances_3_U0_ap_done : STD_LOGIC;
    signal count_appearances_3_U0_ap_continue : STD_LOGIC;
    signal count_appearances_3_U0_ap_idle : STD_LOGIC;
    signal count_appearances_3_U0_ap_ready : STD_LOGIC;
    signal count_appearances_3_U0_input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_3_U0_input_r_ce0 : STD_LOGIC;
    signal count_appearances_3_U0_appearances_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_3_U0_appearances_ce0 : STD_LOGIC;
    signal count_appearances_3_U0_appearances_we0 : STD_LOGIC;
    signal count_appearances_3_U0_appearances_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_3_U0_appearances_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_3_U0_appearances_ce1 : STD_LOGIC;
    signal count_appearances_3_U0_appearances_we1 : STD_LOGIC;
    signal count_appearances_3_U0_appearances_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_U0_ap_start : STD_LOGIC;
    signal count_appearances_U0_ap_done : STD_LOGIC;
    signal count_appearances_U0_ap_continue : STD_LOGIC;
    signal count_appearances_U0_ap_idle : STD_LOGIC;
    signal count_appearances_U0_ap_ready : STD_LOGIC;
    signal count_appearances_U0_input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_U0_input_r_ce0 : STD_LOGIC;
    signal count_appearances_U0_appearances_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_U0_appearances_ce0 : STD_LOGIC;
    signal count_appearances_U0_appearances_we0 : STD_LOGIC;
    signal count_appearances_U0_appearances_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_appearances_U0_appearances_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_appearances_U0_appearances_ce1 : STD_LOGIC;
    signal count_appearances_U0_appearances_we1 : STD_LOGIC;
    signal count_appearances_U0_appearances_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reduce_appearances_U0_ap_start : STD_LOGIC;
    signal reduce_appearances_U0_ap_done : STD_LOGIC;
    signal reduce_appearances_U0_ap_continue : STD_LOGIC;
    signal reduce_appearances_U0_ap_idle : STD_LOGIC;
    signal reduce_appearances_U0_ap_ready : STD_LOGIC;
    signal reduce_appearances_U0_appearances0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances0_ce0 : STD_LOGIC;
    signal reduce_appearances_U0_appearances0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances0_ce1 : STD_LOGIC;
    signal reduce_appearances_U0_appearances1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances1_ce0 : STD_LOGIC;
    signal reduce_appearances_U0_appearances1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances1_ce1 : STD_LOGIC;
    signal reduce_appearances_U0_appearances2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances2_ce0 : STD_LOGIC;
    signal reduce_appearances_U0_appearances2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances2_ce1 : STD_LOGIC;
    signal reduce_appearances_U0_appearances3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances3_ce0 : STD_LOGIC;
    signal reduce_appearances_U0_appearances3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_appearances3_ce1 : STD_LOGIC;
    signal reduce_appearances_U0_combined_apperances_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_combined_apperances_ce0 : STD_LOGIC;
    signal reduce_appearances_U0_combined_apperances_we0 : STD_LOGIC;
    signal reduce_appearances_U0_combined_apperances_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reduce_appearances_U0_combined_apperances_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reduce_appearances_U0_combined_apperances_ce1 : STD_LOGIC;
    signal reduce_appearances_U0_combined_apperances_we1 : STD_LOGIC;
    signal reduce_appearances_U0_combined_apperances_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_threshold_U0_ap_start : STD_LOGIC;
    signal count_threshold_U0_ap_done : STD_LOGIC;
    signal count_threshold_U0_ap_continue : STD_LOGIC;
    signal count_threshold_U0_ap_idle : STD_LOGIC;
    signal count_threshold_U0_ap_ready : STD_LOGIC;
    signal count_threshold_U0_appearances_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_threshold_U0_appearances_ce0 : STD_LOGIC;
    signal count_threshold_U0_appearances_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_threshold_U0_appearances_ce1 : STD_LOGIC;
    signal count_threshold_U0_out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal count_threshold_U0_out_r_ap_vld : STD_LOGIC;
    signal input0_i_full_n : STD_LOGIC;
    signal input0_t_empty_n : STD_LOGIC;
    signal input1_i_full_n : STD_LOGIC;
    signal input1_t_empty_n : STD_LOGIC;
    signal input2_i_full_n : STD_LOGIC;
    signal input2_t_empty_n : STD_LOGIC;
    signal input3_i_full_n : STD_LOGIC;
    signal input3_t_empty_n : STD_LOGIC;
    signal appearances0_i_full_n : STD_LOGIC;
    signal appearances0_t_empty_n : STD_LOGIC;
    signal appearances1_i_full_n : STD_LOGIC;
    signal appearances1_t_empty_n : STD_LOGIC;
    signal appearances2_i_full_n : STD_LOGIC;
    signal appearances2_t_empty_n : STD_LOGIC;
    signal appearances3_i_full_n : STD_LOGIC;
    signal appearances3_t_empty_n : STD_LOGIC;
    signal combined_appearances_i_full_n : STD_LOGIC;
    signal combined_appearances_t_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component byte_count_split IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output0_ce0 : OUT STD_LOGIC;
        output0_we0 : OUT STD_LOGIC;
        output0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output1_ce0 : OUT STD_LOGIC;
        output1_we0 : OUT STD_LOGIC;
        output1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output2_ce0 : OUT STD_LOGIC;
        output2_we0 : OUT STD_LOGIC;
        output2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output3_ce0 : OUT STD_LOGIC;
        output3_we0 : OUT STD_LOGIC;
        output3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component byte_count_count_appearances_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        appearances_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce0 : OUT STD_LOGIC;
        appearances_we0 : OUT STD_LOGIC;
        appearances_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce1 : OUT STD_LOGIC;
        appearances_we1 : OUT STD_LOGIC;
        appearances_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component byte_count_count_appearances_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        appearances_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce0 : OUT STD_LOGIC;
        appearances_we0 : OUT STD_LOGIC;
        appearances_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce1 : OUT STD_LOGIC;
        appearances_we1 : OUT STD_LOGIC;
        appearances_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component byte_count_count_appearances_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        appearances_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce0 : OUT STD_LOGIC;
        appearances_we0 : OUT STD_LOGIC;
        appearances_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce1 : OUT STD_LOGIC;
        appearances_we1 : OUT STD_LOGIC;
        appearances_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component byte_count_count_appearances IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        appearances_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce0 : OUT STD_LOGIC;
        appearances_we0 : OUT STD_LOGIC;
        appearances_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce1 : OUT STD_LOGIC;
        appearances_we1 : OUT STD_LOGIC;
        appearances_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        appearances_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component byte_count_reduce_appearances IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        appearances0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances0_ce0 : OUT STD_LOGIC;
        appearances0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances0_ce1 : OUT STD_LOGIC;
        appearances0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances1_ce0 : OUT STD_LOGIC;
        appearances1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances1_ce1 : OUT STD_LOGIC;
        appearances1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances2_ce0 : OUT STD_LOGIC;
        appearances2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances2_ce1 : OUT STD_LOGIC;
        appearances2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances3_ce0 : OUT STD_LOGIC;
        appearances3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances3_ce1 : OUT STD_LOGIC;
        appearances3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        combined_apperances_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        combined_apperances_ce0 : OUT STD_LOGIC;
        combined_apperances_we0 : OUT STD_LOGIC;
        combined_apperances_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        combined_apperances_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        combined_apperances_ce1 : OUT STD_LOGIC;
        combined_apperances_we1 : OUT STD_LOGIC;
        combined_apperances_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component byte_count_count_threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        appearances_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce0 : OUT STD_LOGIC;
        appearances_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        appearances_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        appearances_ce1 : OUT STD_LOGIC;
        appearances_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_ap_vld : OUT STD_LOGIC );
    end component;


    component byte_count_input0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component byte_count_appearances0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component byte_count_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_ap_vld : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component byte_count_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    input0_U : component byte_count_input0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => split_U0_output0_address0,
        i_ce0 => split_U0_output0_ce0,
        i_we0 => split_U0_output0_we0,
        i_d0 => split_U0_output0_d0,
        i_q0 => input0_i_q0,
        t_address0 => count_appearances_1_U0_input_r_address0,
        t_ce0 => count_appearances_1_U0_input_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input0_i_full_n,
        i_write => ap_channel_done_input0,
        t_empty_n => input0_t_empty_n,
        t_read => count_appearances_1_U0_ap_ready);

    input1_U : component byte_count_input0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => split_U0_output1_address0,
        i_ce0 => split_U0_output1_ce0,
        i_we0 => split_U0_output1_we0,
        i_d0 => split_U0_output1_d0,
        i_q0 => input1_i_q0,
        t_address0 => count_appearances_2_U0_input_r_address0,
        t_ce0 => count_appearances_2_U0_input_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input1_i_full_n,
        i_write => ap_channel_done_input1,
        t_empty_n => input1_t_empty_n,
        t_read => count_appearances_2_U0_ap_ready);

    input2_U : component byte_count_input0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => split_U0_output2_address0,
        i_ce0 => split_U0_output2_ce0,
        i_we0 => split_U0_output2_we0,
        i_d0 => split_U0_output2_d0,
        i_q0 => input2_i_q0,
        t_address0 => count_appearances_3_U0_input_r_address0,
        t_ce0 => count_appearances_3_U0_input_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input2_i_full_n,
        i_write => ap_channel_done_input2,
        t_empty_n => input2_t_empty_n,
        t_read => count_appearances_3_U0_ap_ready);

    input3_U : component byte_count_input0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => split_U0_output3_address0,
        i_ce0 => split_U0_output3_ce0,
        i_we0 => split_U0_output3_we0,
        i_d0 => split_U0_output3_d0,
        i_q0 => input3_i_q0,
        t_address0 => count_appearances_U0_input_r_address0,
        t_ce0 => count_appearances_U0_input_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input3_i_full_n,
        i_write => ap_channel_done_input3,
        t_empty_n => input3_t_empty_n,
        t_read => count_appearances_U0_ap_ready);

    appearances0_U : component byte_count_appearances0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => count_appearances_1_U0_appearances_address0,
        i_ce0 => count_appearances_1_U0_appearances_ce0,
        i_we0 => count_appearances_1_U0_appearances_we0,
        i_d0 => count_appearances_1_U0_appearances_d0,
        i_q0 => appearances0_i_q0,
        i_address1 => count_appearances_1_U0_appearances_address1,
        i_ce1 => count_appearances_1_U0_appearances_ce1,
        i_we1 => count_appearances_1_U0_appearances_we1,
        i_d1 => count_appearances_1_U0_appearances_d1,
        i_q1 => appearances0_i_q1,
        t_address0 => reduce_appearances_U0_appearances0_address0,
        t_ce0 => reduce_appearances_U0_appearances0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => appearances0_t_q0,
        t_address1 => reduce_appearances_U0_appearances0_address1,
        t_ce1 => reduce_appearances_U0_appearances0_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => appearances0_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => appearances0_i_full_n,
        i_write => count_appearances_1_U0_ap_done,
        t_empty_n => appearances0_t_empty_n,
        t_read => reduce_appearances_U0_ap_ready);

    appearances1_U : component byte_count_appearances0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => count_appearances_2_U0_appearances_address0,
        i_ce0 => count_appearances_2_U0_appearances_ce0,
        i_we0 => count_appearances_2_U0_appearances_we0,
        i_d0 => count_appearances_2_U0_appearances_d0,
        i_q0 => appearances1_i_q0,
        i_address1 => count_appearances_2_U0_appearances_address1,
        i_ce1 => count_appearances_2_U0_appearances_ce1,
        i_we1 => count_appearances_2_U0_appearances_we1,
        i_d1 => count_appearances_2_U0_appearances_d1,
        i_q1 => appearances1_i_q1,
        t_address0 => reduce_appearances_U0_appearances1_address0,
        t_ce0 => reduce_appearances_U0_appearances1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => appearances1_t_q0,
        t_address1 => reduce_appearances_U0_appearances1_address1,
        t_ce1 => reduce_appearances_U0_appearances1_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => appearances1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => appearances1_i_full_n,
        i_write => count_appearances_2_U0_ap_done,
        t_empty_n => appearances1_t_empty_n,
        t_read => reduce_appearances_U0_ap_ready);

    appearances2_U : component byte_count_appearances0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => count_appearances_3_U0_appearances_address0,
        i_ce0 => count_appearances_3_U0_appearances_ce0,
        i_we0 => count_appearances_3_U0_appearances_we0,
        i_d0 => count_appearances_3_U0_appearances_d0,
        i_q0 => appearances2_i_q0,
        i_address1 => count_appearances_3_U0_appearances_address1,
        i_ce1 => count_appearances_3_U0_appearances_ce1,
        i_we1 => count_appearances_3_U0_appearances_we1,
        i_d1 => count_appearances_3_U0_appearances_d1,
        i_q1 => appearances2_i_q1,
        t_address0 => reduce_appearances_U0_appearances2_address0,
        t_ce0 => reduce_appearances_U0_appearances2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => appearances2_t_q0,
        t_address1 => reduce_appearances_U0_appearances2_address1,
        t_ce1 => reduce_appearances_U0_appearances2_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => appearances2_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => appearances2_i_full_n,
        i_write => count_appearances_3_U0_ap_done,
        t_empty_n => appearances2_t_empty_n,
        t_read => reduce_appearances_U0_ap_ready);

    appearances3_U : component byte_count_appearances0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => count_appearances_U0_appearances_address0,
        i_ce0 => count_appearances_U0_appearances_ce0,
        i_we0 => count_appearances_U0_appearances_we0,
        i_d0 => count_appearances_U0_appearances_d0,
        i_q0 => appearances3_i_q0,
        i_address1 => count_appearances_U0_appearances_address1,
        i_ce1 => count_appearances_U0_appearances_ce1,
        i_we1 => count_appearances_U0_appearances_we1,
        i_d1 => count_appearances_U0_appearances_d1,
        i_q1 => appearances3_i_q1,
        t_address0 => reduce_appearances_U0_appearances3_address0,
        t_ce0 => reduce_appearances_U0_appearances3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => appearances3_t_q0,
        t_address1 => reduce_appearances_U0_appearances3_address1,
        t_ce1 => reduce_appearances_U0_appearances3_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => appearances3_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => appearances3_i_full_n,
        i_write => count_appearances_U0_ap_done,
        t_empty_n => appearances3_t_empty_n,
        t_read => reduce_appearances_U0_ap_ready);

    combined_appearances_U : component byte_count_appearances0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => reduce_appearances_U0_combined_apperances_address0,
        i_ce0 => reduce_appearances_U0_combined_apperances_ce0,
        i_we0 => reduce_appearances_U0_combined_apperances_we0,
        i_d0 => reduce_appearances_U0_combined_apperances_d0,
        i_q0 => combined_appearances_i_q0,
        i_address1 => reduce_appearances_U0_combined_apperances_address1,
        i_ce1 => reduce_appearances_U0_combined_apperances_ce1,
        i_we1 => reduce_appearances_U0_combined_apperances_we1,
        i_d1 => reduce_appearances_U0_combined_apperances_d1,
        i_q1 => combined_appearances_i_q1,
        t_address0 => count_threshold_U0_appearances_address0,
        t_ce0 => count_threshold_U0_appearances_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => combined_appearances_t_q0,
        t_address1 => count_threshold_U0_appearances_address1,
        t_ce1 => count_threshold_U0_appearances_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => combined_appearances_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => combined_appearances_i_full_n,
        i_write => reduce_appearances_U0_ap_done,
        t_empty_n => combined_appearances_t_empty_n,
        t_read => count_threshold_U0_ap_ready);

    control_s_axi_U : component byte_count_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        out_r => count_threshold_U0_out_r,
        out_r_ap_vld => count_threshold_U0_out_r_ap_vld,
        ap_local_deadlock => ap_local_deadlock);

    gmem_m_axi_U : component byte_count_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 2,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 10,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => split_U0_m_axi_gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => split_U0_m_axi_gmem_ARADDR,
        I_ARID => split_U0_m_axi_gmem_ARID,
        I_ARLEN => split_U0_m_axi_gmem_ARLEN,
        I_ARSIZE => split_U0_m_axi_gmem_ARSIZE,
        I_ARLOCK => split_U0_m_axi_gmem_ARLOCK,
        I_ARCACHE => split_U0_m_axi_gmem_ARCACHE,
        I_ARQOS => split_U0_m_axi_gmem_ARQOS,
        I_ARPROT => split_U0_m_axi_gmem_ARPROT,
        I_ARUSER => split_U0_m_axi_gmem_ARUSER,
        I_ARBURST => split_U0_m_axi_gmem_ARBURST,
        I_ARREGION => split_U0_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => split_U0_m_axi_gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    split_U0 : component byte_count_split
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => split_U0_ap_start,
        ap_done => split_U0_ap_done,
        ap_continue => split_U0_ap_continue,
        ap_idle => split_U0_ap_idle,
        ap_ready => split_U0_ap_ready,
        m_axi_gmem_AWVALID => split_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => split_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => split_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => split_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => split_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => split_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => split_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => split_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => split_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => split_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => split_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => split_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => split_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => split_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => split_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => split_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => split_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => split_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => split_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => split_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => split_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => split_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => split_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => split_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => split_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => split_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => split_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => split_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => split_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => split_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => split_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => split_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        input_r => input_r,
        output0_address0 => split_U0_output0_address0,
        output0_ce0 => split_U0_output0_ce0,
        output0_we0 => split_U0_output0_we0,
        output0_d0 => split_U0_output0_d0,
        output1_address0 => split_U0_output1_address0,
        output1_ce0 => split_U0_output1_ce0,
        output1_we0 => split_U0_output1_we0,
        output1_d0 => split_U0_output1_d0,
        output2_address0 => split_U0_output2_address0,
        output2_ce0 => split_U0_output2_ce0,
        output2_we0 => split_U0_output2_we0,
        output2_d0 => split_U0_output2_d0,
        output3_address0 => split_U0_output3_address0,
        output3_ce0 => split_U0_output3_ce0,
        output3_we0 => split_U0_output3_we0,
        output3_d0 => split_U0_output3_d0);

    count_appearances_1_U0 : component byte_count_count_appearances_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => count_appearances_1_U0_ap_start,
        ap_done => count_appearances_1_U0_ap_done,
        ap_continue => count_appearances_1_U0_ap_continue,
        ap_idle => count_appearances_1_U0_ap_idle,
        ap_ready => count_appearances_1_U0_ap_ready,
        input_r_address0 => count_appearances_1_U0_input_r_address0,
        input_r_ce0 => count_appearances_1_U0_input_r_ce0,
        input_r_q0 => input0_t_q0,
        appearances_address0 => count_appearances_1_U0_appearances_address0,
        appearances_ce0 => count_appearances_1_U0_appearances_ce0,
        appearances_we0 => count_appearances_1_U0_appearances_we0,
        appearances_d0 => count_appearances_1_U0_appearances_d0,
        appearances_address1 => count_appearances_1_U0_appearances_address1,
        appearances_ce1 => count_appearances_1_U0_appearances_ce1,
        appearances_we1 => count_appearances_1_U0_appearances_we1,
        appearances_d1 => count_appearances_1_U0_appearances_d1,
        appearances_q1 => appearances0_i_q1);

    count_appearances_2_U0 : component byte_count_count_appearances_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => count_appearances_2_U0_ap_start,
        ap_done => count_appearances_2_U0_ap_done,
        ap_continue => count_appearances_2_U0_ap_continue,
        ap_idle => count_appearances_2_U0_ap_idle,
        ap_ready => count_appearances_2_U0_ap_ready,
        input_r_address0 => count_appearances_2_U0_input_r_address0,
        input_r_ce0 => count_appearances_2_U0_input_r_ce0,
        input_r_q0 => input1_t_q0,
        appearances_address0 => count_appearances_2_U0_appearances_address0,
        appearances_ce0 => count_appearances_2_U0_appearances_ce0,
        appearances_we0 => count_appearances_2_U0_appearances_we0,
        appearances_d0 => count_appearances_2_U0_appearances_d0,
        appearances_address1 => count_appearances_2_U0_appearances_address1,
        appearances_ce1 => count_appearances_2_U0_appearances_ce1,
        appearances_we1 => count_appearances_2_U0_appearances_we1,
        appearances_d1 => count_appearances_2_U0_appearances_d1,
        appearances_q1 => appearances1_i_q1);

    count_appearances_3_U0 : component byte_count_count_appearances_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => count_appearances_3_U0_ap_start,
        ap_done => count_appearances_3_U0_ap_done,
        ap_continue => count_appearances_3_U0_ap_continue,
        ap_idle => count_appearances_3_U0_ap_idle,
        ap_ready => count_appearances_3_U0_ap_ready,
        input_r_address0 => count_appearances_3_U0_input_r_address0,
        input_r_ce0 => count_appearances_3_U0_input_r_ce0,
        input_r_q0 => input2_t_q0,
        appearances_address0 => count_appearances_3_U0_appearances_address0,
        appearances_ce0 => count_appearances_3_U0_appearances_ce0,
        appearances_we0 => count_appearances_3_U0_appearances_we0,
        appearances_d0 => count_appearances_3_U0_appearances_d0,
        appearances_address1 => count_appearances_3_U0_appearances_address1,
        appearances_ce1 => count_appearances_3_U0_appearances_ce1,
        appearances_we1 => count_appearances_3_U0_appearances_we1,
        appearances_d1 => count_appearances_3_U0_appearances_d1,
        appearances_q1 => appearances2_i_q1);

    count_appearances_U0 : component byte_count_count_appearances
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => count_appearances_U0_ap_start,
        ap_done => count_appearances_U0_ap_done,
        ap_continue => count_appearances_U0_ap_continue,
        ap_idle => count_appearances_U0_ap_idle,
        ap_ready => count_appearances_U0_ap_ready,
        input_r_address0 => count_appearances_U0_input_r_address0,
        input_r_ce0 => count_appearances_U0_input_r_ce0,
        input_r_q0 => input3_t_q0,
        appearances_address0 => count_appearances_U0_appearances_address0,
        appearances_ce0 => count_appearances_U0_appearances_ce0,
        appearances_we0 => count_appearances_U0_appearances_we0,
        appearances_d0 => count_appearances_U0_appearances_d0,
        appearances_address1 => count_appearances_U0_appearances_address1,
        appearances_ce1 => count_appearances_U0_appearances_ce1,
        appearances_we1 => count_appearances_U0_appearances_we1,
        appearances_d1 => count_appearances_U0_appearances_d1,
        appearances_q1 => appearances3_i_q1);

    reduce_appearances_U0 : component byte_count_reduce_appearances
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => reduce_appearances_U0_ap_start,
        ap_done => reduce_appearances_U0_ap_done,
        ap_continue => reduce_appearances_U0_ap_continue,
        ap_idle => reduce_appearances_U0_ap_idle,
        ap_ready => reduce_appearances_U0_ap_ready,
        appearances0_address0 => reduce_appearances_U0_appearances0_address0,
        appearances0_ce0 => reduce_appearances_U0_appearances0_ce0,
        appearances0_q0 => appearances0_t_q0,
        appearances0_address1 => reduce_appearances_U0_appearances0_address1,
        appearances0_ce1 => reduce_appearances_U0_appearances0_ce1,
        appearances0_q1 => appearances0_t_q1,
        appearances1_address0 => reduce_appearances_U0_appearances1_address0,
        appearances1_ce0 => reduce_appearances_U0_appearances1_ce0,
        appearances1_q0 => appearances1_t_q0,
        appearances1_address1 => reduce_appearances_U0_appearances1_address1,
        appearances1_ce1 => reduce_appearances_U0_appearances1_ce1,
        appearances1_q1 => appearances1_t_q1,
        appearances2_address0 => reduce_appearances_U0_appearances2_address0,
        appearances2_ce0 => reduce_appearances_U0_appearances2_ce0,
        appearances2_q0 => appearances2_t_q0,
        appearances2_address1 => reduce_appearances_U0_appearances2_address1,
        appearances2_ce1 => reduce_appearances_U0_appearances2_ce1,
        appearances2_q1 => appearances2_t_q1,
        appearances3_address0 => reduce_appearances_U0_appearances3_address0,
        appearances3_ce0 => reduce_appearances_U0_appearances3_ce0,
        appearances3_q0 => appearances3_t_q0,
        appearances3_address1 => reduce_appearances_U0_appearances3_address1,
        appearances3_ce1 => reduce_appearances_U0_appearances3_ce1,
        appearances3_q1 => appearances3_t_q1,
        combined_apperances_address0 => reduce_appearances_U0_combined_apperances_address0,
        combined_apperances_ce0 => reduce_appearances_U0_combined_apperances_ce0,
        combined_apperances_we0 => reduce_appearances_U0_combined_apperances_we0,
        combined_apperances_d0 => reduce_appearances_U0_combined_apperances_d0,
        combined_apperances_address1 => reduce_appearances_U0_combined_apperances_address1,
        combined_apperances_ce1 => reduce_appearances_U0_combined_apperances_ce1,
        combined_apperances_we1 => reduce_appearances_U0_combined_apperances_we1,
        combined_apperances_d1 => reduce_appearances_U0_combined_apperances_d1);

    count_threshold_U0 : component byte_count_count_threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => count_threshold_U0_ap_start,
        ap_done => count_threshold_U0_ap_done,
        ap_continue => count_threshold_U0_ap_continue,
        ap_idle => count_threshold_U0_ap_idle,
        ap_ready => count_threshold_U0_ap_ready,
        appearances_address0 => count_threshold_U0_appearances_address0,
        appearances_ce0 => count_threshold_U0_appearances_ce0,
        appearances_q0 => combined_appearances_t_q0,
        appearances_address1 => count_threshold_U0_appearances_address1,
        appearances_ce1 => count_threshold_U0_appearances_ce1,
        appearances_q1 => combined_appearances_t_q1,
        out_r => count_threshold_U0_out_r,
        out_r_ap_vld => count_threshold_U0_out_r_ap_vld);





    ap_sync_reg_channel_write_input0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_input0 <= ap_const_logic_0;
            else
                if (((split_U0_ap_done and split_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input0 <= ap_sync_channel_write_input0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_input1 <= ap_const_logic_0;
            else
                if (((split_U0_ap_done and split_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input1 <= ap_sync_channel_write_input1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_input2 <= ap_const_logic_0;
            else
                if (((split_U0_ap_done and split_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input2 <= ap_sync_channel_write_input2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_input3 <= ap_const_logic_0;
            else
                if (((split_U0_ap_done and split_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input3 <= ap_sync_channel_write_input3;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_input0 <= (split_U0_ap_done and (ap_sync_reg_channel_write_input0 xor ap_const_logic_1));
    ap_channel_done_input1 <= (split_U0_ap_done and (ap_sync_reg_channel_write_input1 xor ap_const_logic_1));
    ap_channel_done_input2 <= (split_U0_ap_done and (ap_sync_reg_channel_write_input2 xor ap_const_logic_1));
    ap_channel_done_input3 <= (split_U0_ap_done and (ap_sync_reg_channel_write_input3 xor ap_const_logic_1));
    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_input0 <= ((split_U0_output0_full_n and ap_channel_done_input0) or ap_sync_reg_channel_write_input0);
    ap_sync_channel_write_input1 <= ((split_U0_output1_full_n and ap_channel_done_input1) or ap_sync_reg_channel_write_input1);
    ap_sync_channel_write_input2 <= ((split_U0_output2_full_n and ap_channel_done_input2) or ap_sync_reg_channel_write_input2);
    ap_sync_channel_write_input3 <= ((split_U0_output3_full_n and ap_channel_done_input3) or ap_sync_reg_channel_write_input3);
    count_appearances_1_U0_ap_continue <= appearances0_i_full_n;
    count_appearances_1_U0_ap_start <= input0_t_empty_n;
    count_appearances_2_U0_ap_continue <= appearances1_i_full_n;
    count_appearances_2_U0_ap_start <= input1_t_empty_n;
    count_appearances_3_U0_ap_continue <= appearances2_i_full_n;
    count_appearances_3_U0_ap_start <= input2_t_empty_n;
    count_appearances_U0_ap_continue <= appearances3_i_full_n;
    count_appearances_U0_ap_start <= input3_t_empty_n;
    count_threshold_U0_ap_continue <= ap_const_logic_1;
    count_threshold_U0_ap_start <= combined_appearances_t_empty_n;
    reduce_appearances_U0_ap_continue <= combined_appearances_i_full_n;
    reduce_appearances_U0_ap_start <= (appearances3_t_empty_n and appearances2_t_empty_n and appearances1_t_empty_n and appearances0_t_empty_n);
    split_U0_ap_continue <= (ap_sync_channel_write_input3 and ap_sync_channel_write_input2 and ap_sync_channel_write_input1 and ap_sync_channel_write_input0);
    split_U0_ap_start <= ap_const_logic_1;
    split_U0_output0_full_n <= input0_i_full_n;
    split_U0_output1_full_n <= input1_i_full_n;
    split_U0_output2_full_n <= input2_i_full_n;
    split_U0_output3_full_n <= input3_i_full_n;
end behav;
