-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_count_Pipeline_APPEARANCES is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    In_r_TVALID : IN STD_LOGIC;
    In_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    In_r_TREADY : OUT STD_LOGIC;
    appear_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    appear_ce0 : OUT STD_LOGIC;
    appear_we0 : OUT STD_LOGIC;
    appear_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    appear_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    appear_ce1 : OUT STD_LOGIC;
    appear_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    prev_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    prev_out_ap_vld : OUT STD_LOGIC;
    count_V_5_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    count_V_5_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of accelerator_count_Pipeline_APPEARANCES is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln36_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal In_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln36_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_2_reg_289 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln859_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_fu_56 : STD_LOGIC_VECTOR (2 downto 0);
    signal count_V_2_fu_241_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal count_V_1_fu_200_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_lhs_load_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal prev_fu_60 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_fu_132_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal prev_1_fu_152_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1393_fu_176_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_180_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal overflow_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_V_fu_186_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1393_1_fu_217_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_1_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal overflow_1_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln859_fu_227_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_30 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_33 : BOOLEAN;
    signal ap_enable_operation_43 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_264 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_64 <= i_3_fu_132_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_56 <= ap_const_lv3_0;
                elsif ((ap_const_boolean_1 = ap_condition_264)) then 
                    lhs_fu_56 <= count_V_1_fu_200_p3;
                elsif (((icmp_ln44_reg_302 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    lhs_fu_56 <= count_V_2_fu_241_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln36_reg_285 <= icmp_ln36_fu_126_p2;
                icmp_ln44_reg_302 <= icmp_ln44_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln40_reg_297 <= icmp_ln40_fu_138_p2;
                prev_2_reg_289 <= In_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                prev_fu_60 <= prev_2_reg_289;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    In_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, In_r_TVALID, icmp_ln36_fu_126_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_r_TDATA_blk_n <= In_r_TVALID;
        else 
            In_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    In_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln36_fu_126_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_r_TREADY <= ap_const_logic_1;
        else 
            In_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln859_fu_227_p2 <= std_logic_vector(unsigned(appear_q1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(In_r_TVALID, icmp_ln36_fu_126_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_0 = In_r_TVALID) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(In_r_TVALID, icmp_ln36_fu_126_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_0 = In_r_TVALID) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(In_r_TVALID, icmp_ln36_fu_126_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_0 = In_r_TVALID) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(In_r_TVALID, icmp_ln36_fu_126_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln36_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_0 = In_r_TVALID));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_264_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln44_fu_158_p2)
    begin
                ap_condition_264 <= ((icmp_ln44_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln36_fu_126_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln36_fu_126_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_30_assign_proc : process(icmp_ln44_fu_158_p2)
    begin
                ap_enable_operation_30 <= (icmp_ln44_fu_158_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_33_assign_proc : process(icmp_ln44_fu_158_p2)
    begin
                ap_enable_operation_33 <= (icmp_ln44_fu_158_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_43_assign_proc : process(icmp_ln44_reg_302)
    begin
                ap_enable_operation_43 <= (icmp_ln44_reg_302 = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln44_reg_302, lhs_fu_56, count_V_2_fu_241_p3)
    begin
        if (((icmp_ln44_reg_302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_lhs_load_1 <= count_V_2_fu_241_p3;
        else 
            ap_sig_allocacmp_lhs_load_1 <= lhs_fu_56;
        end if; 
    end process;

    appear_address0 <= zext_ln47_fu_167_p1(8 - 1 downto 0);
    appear_address1 <= zext_ln859_fu_172_p1(8 - 1 downto 0);

    appear_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            appear_ce0 <= ap_const_logic_1;
        else 
            appear_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    appear_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            appear_ce1 <= ap_const_logic_1;
        else 
            appear_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    appear_d0 <= ap_sig_allocacmp_lhs_load_1;

    appear_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln44_fu_158_p2)
    begin
        if (((icmp_ln44_fu_158_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            appear_we0 <= ap_const_logic_1;
        else 
            appear_we0 <= ap_const_logic_0;
        end if; 
    end process;

    count_V_1_fu_200_p3 <= 
        ap_const_lv3_7 when (overflow_fu_192_p3(0) = '1') else 
        count_V_fu_186_p2;
    count_V_2_fu_241_p3 <= 
        ap_const_lv3_7 when (overflow_1_fu_233_p3(0) = '1') else 
        add_ln859_fu_227_p2;
    count_V_5_out <= lhs_fu_56;

    count_V_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln36_reg_285)
    begin
        if (((icmp_ln36_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_V_5_out_ap_vld <= ap_const_logic_1;
        else 
            count_V_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_V_fu_186_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_lhs_load_1) + unsigned(ap_const_lv3_1));
    i_3_fu_132_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv11_1));
    icmp_ln36_fu_126_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv11_400) else "0";
    icmp_ln40_fu_138_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv11_0) else "0";
    icmp_ln44_fu_158_p2 <= "1" when (prev_1_fu_152_p3 = prev_2_reg_289) else "0";
    overflow_1_fu_233_p3 <= ret_V_1_fu_221_p2(3 downto 3);
    overflow_fu_192_p3 <= ret_V_fu_180_p2(3 downto 3);
    prev_1_fu_152_p3 <= 
        prev_2_reg_289 when (icmp_ln40_reg_297(0) = '1') else 
        prev_fu_60;
    prev_out <= prev_fu_60;

    prev_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln36_reg_285)
    begin
        if (((icmp_ln36_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_out_ap_vld <= ap_const_logic_1;
        else 
            prev_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_221_p2 <= std_logic_vector(unsigned(zext_ln1393_1_fu_217_p1) + unsigned(ap_const_lv4_1));
    ret_V_fu_180_p2 <= std_logic_vector(unsigned(zext_ln1393_fu_176_p1) + unsigned(ap_const_lv4_1));
    zext_ln1393_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(appear_q1),4));
    zext_ln1393_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_lhs_load_1),4));
    zext_ln47_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prev_1_fu_152_p3),32));
    zext_ln859_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prev_2_reg_289),32));
end behav;
