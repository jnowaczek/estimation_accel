// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="accelerator_accelerator,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=9.359000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.659300,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=893,HLS_SYN_LUT=2743,HLS_VERSION=2022_1}" *)

module accelerator (
        In_r_dout,
        In_r_empty_n,
        In_r_read,
        num_blocks,
        Out_r_din,
        Out_r_full_n,
        Out_r_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] In_r_dout;
input   In_r_empty_n;
output   In_r_read;
input  [31:0] num_blocks;
output  [31:0] Out_r_din;
input   Out_r_full_n;
output   Out_r_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_idle;

wire    dataflow_in_loop_VITIS_LOOP_10_1_U0_In_r_read;
wire   [31:0] dataflow_in_loop_VITIS_LOOP_10_1_U0_Out_r_din;
wire    dataflow_in_loop_VITIS_LOOP_10_1_U0_Out_r_write;
wire    dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_start;
wire    dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_done;
wire    dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_ready;
wire    dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_idle;
reg    dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_continue;
wire    ap_bound_full_n;
reg    ap_bound_write;
wire   [31:0] ap_bound_dout;
wire    ap_bound_empty_n;
wire    ap_bound_read;
reg   [31:0] ap_loop_dataflow_input_count;
reg   [31:0] ap_loop_dataflow_output_count;
wire   [31:0] ap_bound_minus_1;
wire   [31:0] ap_bound_minus_1_output;
reg    ap_real_start;
reg    ap_partial_ready;
reg    ap_internal_ready;
reg    ap_internal_done;
wire    ap_bound_ack;
reg    ap_bound_reg_ack;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_loop_dataflow_input_count = 32'd0;
#0 ap_loop_dataflow_output_count = 32'd0;
#0 ap_bound_reg_ack = 1'b0;
end

accelerator_dataflow_in_loop_VITIS_LOOP_10_1 dataflow_in_loop_VITIS_LOOP_10_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .In_r_dout(In_r_dout),
    .In_r_empty_n(In_r_empty_n),
    .In_r_read(dataflow_in_loop_VITIS_LOOP_10_1_U0_In_r_read),
    .Out_r_din(dataflow_in_loop_VITIS_LOOP_10_1_U0_Out_r_din),
    .Out_r_full_n(Out_r_full_n),
    .Out_r_write(dataflow_in_loop_VITIS_LOOP_10_1_U0_Out_r_write),
    .ap_start(dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_start),
    .ap_done(dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_done),
    .ap_ready(dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_ready),
    .ap_idle(dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_idle),
    .ap_continue(dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_continue)
);

accelerator_ap_bound ap_bound_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(num_blocks),
    .if_full_n(ap_bound_full_n),
    .if_write(ap_bound_write),
    .if_dout(ap_bound_dout),
    .if_empty_n(ap_bound_empty_n),
    .if_read(ap_bound_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_bound_reg_ack <= 1'b0;
    end else begin
        if (((ap_internal_ready == 1'b0) & (ap_start == 1'b1))) begin
            ap_bound_reg_ack <= ap_bound_ack;
        end else begin
            ap_bound_reg_ack <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_dataflow_input_count <= 32'd0;
    end else begin
        if ((~(ap_loop_dataflow_input_count == ap_bound_minus_1) & (ap_real_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_ready == 1'b1))) begin
            ap_loop_dataflow_input_count <= (ap_loop_dataflow_input_count + 32'd1);
        end else if (((ap_real_start == 1'b1) & (ap_loop_dataflow_input_count == ap_bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_ready == 1'b1))) begin
            ap_loop_dataflow_input_count <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_dataflow_output_count <= 32'd0;
    end else begin
        if ((~(ap_loop_dataflow_output_count == ap_bound_minus_1_output) & (32'd0 < ap_bound_dout) & (1'b1 == ap_bound_empty_n) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_done == 1'b1))) begin
            ap_loop_dataflow_output_count <= (ap_loop_dataflow_output_count + 32'd1);
        end else if (((32'd0 < ap_bound_dout) & (ap_loop_dataflow_output_count == ap_bound_minus_1_output) & (1'b1 == ap_bound_empty_n) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_done == 1'b1))) begin
            ap_loop_dataflow_output_count <= 32'd0;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_bound_reg_ack) & (ap_start == 1'b1))) begin
        ap_bound_write = 1'b1;
    end else begin
        ap_bound_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_dataflow_output_count == 32'd0) & (1'b0 == ap_bound_empty_n) & (ap_start == 1'b0) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_bound_empty_n) & ((32'd0 == ap_bound_dout) | ((ap_loop_dataflow_output_count == ap_bound_minus_1_output) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_done == 1'b1))))) begin
        ap_internal_done = 1'b1;
    end else begin
        ap_internal_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_partial_ready == 1'b1) | ((num_blocks <= 32'd0) & (ap_start == 1'b1)))) begin
        ap_internal_ready = 1'b1;
    end else begin
        ap_internal_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_real_start == 1'b1) & (ap_loop_dataflow_input_count == ap_bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_ready == 1'b1))) begin
        ap_partial_ready = 1'b1;
    end else begin
        ap_partial_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(num_blocks <= 32'd0) & (1'b1 == ap_bound_ack) & (ap_start == 1'b1))) begin
        ap_real_start = 1'b1;
    end else begin
        ap_real_start = 1'b0;
    end
end

always @ (*) begin
    if ((~(ap_loop_dataflow_output_count == ap_bound_minus_1_output) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_continue = 1'b0;
    end
end

assign In_r_read = dataflow_in_loop_VITIS_LOOP_10_1_U0_In_r_read;

assign Out_r_din = dataflow_in_loop_VITIS_LOOP_10_1_U0_Out_r_din;

assign Out_r_write = dataflow_in_loop_VITIS_LOOP_10_1_U0_Out_r_write;

assign ap_bound_ack = (ap_bound_reg_ack | ap_bound_full_n);

assign ap_bound_minus_1 = (num_blocks - 32'd1);

assign ap_bound_minus_1_output = (ap_bound_dout - 32'd1);

assign ap_bound_read = (ap_internal_done & ap_continue & ap_bound_empty_n);

assign ap_done = ap_internal_done;

assign ap_ready = ap_internal_ready;

assign dataflow_in_loop_VITIS_LOOP_10_1_U0_ap_start = ap_real_start;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "accelerator_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //accelerator

